// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blocks.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blocks_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blocks_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blocks_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blocks_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blocks_2eproto;
namespace safex {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockHeader;
class BlockHeaderDefaultTypeInternal;
extern BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
class Blocks;
class BlocksDefaultTypeInternal;
extern BlocksDefaultTypeInternal _Blocks_default_instance_;
}  // namespace safex
PROTOBUF_NAMESPACE_OPEN
template<> ::safex::Block* Arena::CreateMaybeMessage<::safex::Block>(Arena*);
template<> ::safex::BlockHeader* Arena::CreateMaybeMessage<::safex::BlockHeader>(Arena*);
template<> ::safex::Blocks* Arena::CreateMaybeMessage<::safex::Blocks>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safex {

// ===================================================================

class BlockHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.BlockHeader) */ {
 public:
  BlockHeader();
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);
  BlockHeader(BlockHeader&& from) noexcept
    : BlockHeader() {
    *this = ::std::move(from);
  }

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockHeader& operator=(BlockHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockHeader* internal_default_instance() {
    return reinterpret_cast<const BlockHeader*>(
               &_BlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockHeader& a, BlockHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const final {
    return CreateMaybeMessage<BlockHeader>(nullptr);
  }

  BlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.BlockHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_blocks_2eproto);
    return ::descriptor_table_blocks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kPrevHashFieldNumber = 5,
    kDepthFieldNumber = 1,
    kMajorVersionFieldNumber = 3,
    kMinorVersionFieldNumber = 4,
  };
  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string prev_hash = 5;
  void clear_prev_hash();
  const std::string& prev_hash() const;
  void set_prev_hash(const std::string& value);
  void set_prev_hash(std::string&& value);
  void set_prev_hash(const char* value);
  void set_prev_hash(const char* value, size_t size);
  std::string* mutable_prev_hash();
  std::string* release_prev_hash();
  void set_allocated_prev_hash(std::string* prev_hash);
  private:
  const std::string& _internal_prev_hash() const;
  void _internal_set_prev_hash(const std::string& value);
  std::string* _internal_mutable_prev_hash();
  public:

  // uint64 depth = 1;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::uint64 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 major_version = 3;
  void clear_major_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 major_version() const;
  void set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_major_version() const;
  void _internal_set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 minor_version = 4;
  void clear_minor_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 minor_version() const;
  void set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minor_version() const;
  void _internal_set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:safex.BlockHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 depth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 major_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minor_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blocks_2eproto;
};
// -------------------------------------------------------------------

class Block :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.Block";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_blocks_2eproto);
    return ::descriptor_table_blocks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 2,
    kMinerTxFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated string txs = 2;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  const std::string& txs(int index) const;
  std::string* mutable_txs(int index);
  void set_txs(int index, const std::string& value);
  void set_txs(int index, std::string&& value);
  void set_txs(int index, const char* value);
  void set_txs(int index, const char* value, size_t size);
  std::string* add_txs();
  void add_txs(const std::string& value);
  void add_txs(std::string&& value);
  void add_txs(const char* value);
  void add_txs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_txs();
  private:
  const std::string& _internal_txs(int index) const;
  std::string* _internal_add_txs();
  public:

  // string miner_tx = 3;
  void clear_miner_tx();
  const std::string& miner_tx() const;
  void set_miner_tx(const std::string& value);
  void set_miner_tx(std::string&& value);
  void set_miner_tx(const char* value);
  void set_miner_tx(const char* value, size_t size);
  std::string* mutable_miner_tx();
  std::string* release_miner_tx();
  void set_allocated_miner_tx(std::string* miner_tx);
  private:
  const std::string& _internal_miner_tx() const;
  void _internal_set_miner_tx(const std::string& value);
  std::string* _internal_mutable_miner_tx();
  public:

  // .safex.BlockHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::safex::BlockHeader& header() const;
  ::safex::BlockHeader* release_header();
  ::safex::BlockHeader* mutable_header();
  void set_allocated_header(::safex::BlockHeader* header);
  private:
  const ::safex::BlockHeader& _internal_header() const;
  ::safex::BlockHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:safex.Block)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> txs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr miner_tx_;
  ::safex::BlockHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blocks_2eproto;
};
// -------------------------------------------------------------------

class Blocks :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.Blocks) */ {
 public:
  Blocks();
  virtual ~Blocks();

  Blocks(const Blocks& from);
  Blocks(Blocks&& from) noexcept
    : Blocks() {
    *this = ::std::move(from);
  }

  inline Blocks& operator=(const Blocks& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blocks& operator=(Blocks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Blocks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Blocks* internal_default_instance() {
    return reinterpret_cast<const Blocks*>(
               &_Blocks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Blocks& a, Blocks& b) {
    a.Swap(&b);
  }
  inline void Swap(Blocks* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Blocks* New() const final {
    return CreateMaybeMessage<Blocks>(nullptr);
  }

  Blocks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Blocks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Blocks& from);
  void MergeFrom(const Blocks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Blocks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.Blocks";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_blocks_2eproto);
    return ::descriptor_table_blocks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kErrorFieldNumber = 4,
    kStatusFieldNumber = 2,
    kUntrustedFieldNumber = 3,
  };
  // repeated .safex.Block block = 1;
  int block_size() const;
  private:
  int _internal_block_size() const;
  public:
  void clear_block();
  ::safex::Block* mutable_block(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Block >*
      mutable_block();
  private:
  const ::safex::Block& _internal_block(int index) const;
  ::safex::Block* _internal_add_block();
  public:
  const ::safex::Block& block(int index) const;
  ::safex::Block* add_block();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Block >&
      block() const;

  // string error = 4;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 2;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // bool untrusted = 3;
  void clear_untrusted();
  bool untrusted() const;
  void set_untrusted(bool value);
  private:
  bool _internal_untrusted() const;
  void _internal_set_untrusted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safex.Blocks)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Block > block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  bool untrusted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blocks_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockHeader

// uint64 depth = 1;
inline void BlockHeader::clear_depth() {
  depth_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::depth() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.depth)
  return _internal_depth();
}
inline void BlockHeader::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  depth_ = value;
}
inline void BlockHeader::set_depth(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:safex.BlockHeader.depth)
}

// string hash = 2;
inline void BlockHeader::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::hash() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.hash)
  return _internal_hash();
}
inline void BlockHeader::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:safex.BlockHeader.hash)
}
inline std::string* BlockHeader::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:safex.BlockHeader.hash)
  return _internal_mutable_hash();
}
inline const std::string& BlockHeader::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void BlockHeader::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockHeader::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.BlockHeader.hash)
}
inline void BlockHeader::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.BlockHeader.hash)
}
inline void BlockHeader::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.BlockHeader.hash)
}
inline std::string* BlockHeader::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_hash() {
  // @@protoc_insertion_point(field_release:safex.BlockHeader.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:safex.BlockHeader.hash)
}

// uint32 major_version = 3;
inline void BlockHeader::clear_major_version() {
  major_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockHeader::_internal_major_version() const {
  return major_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockHeader::major_version() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.major_version)
  return _internal_major_version();
}
inline void BlockHeader::_internal_set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  major_version_ = value;
}
inline void BlockHeader::set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_major_version(value);
  // @@protoc_insertion_point(field_set:safex.BlockHeader.major_version)
}

// uint32 minor_version = 4;
inline void BlockHeader::clear_minor_version() {
  minor_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockHeader::_internal_minor_version() const {
  return minor_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockHeader::minor_version() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.minor_version)
  return _internal_minor_version();
}
inline void BlockHeader::_internal_set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minor_version_ = value;
}
inline void BlockHeader::set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minor_version(value);
  // @@protoc_insertion_point(field_set:safex.BlockHeader.minor_version)
}

// string prev_hash = 5;
inline void BlockHeader::clear_prev_hash() {
  prev_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::prev_hash() const {
  // @@protoc_insertion_point(field_get:safex.BlockHeader.prev_hash)
  return _internal_prev_hash();
}
inline void BlockHeader::set_prev_hash(const std::string& value) {
  _internal_set_prev_hash(value);
  // @@protoc_insertion_point(field_set:safex.BlockHeader.prev_hash)
}
inline std::string* BlockHeader::mutable_prev_hash() {
  // @@protoc_insertion_point(field_mutable:safex.BlockHeader.prev_hash)
  return _internal_mutable_prev_hash();
}
inline const std::string& BlockHeader::_internal_prev_hash() const {
  return prev_hash_.GetNoArena();
}
inline void BlockHeader::_internal_set_prev_hash(const std::string& value) {
  
  prev_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockHeader::set_prev_hash(std::string&& value) {
  
  prev_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.BlockHeader.prev_hash)
}
inline void BlockHeader::set_prev_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prev_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.BlockHeader.prev_hash)
}
inline void BlockHeader::set_prev_hash(const char* value, size_t size) {
  
  prev_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.BlockHeader.prev_hash)
}
inline std::string* BlockHeader::_internal_mutable_prev_hash() {
  
  return prev_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_prev_hash() {
  // @@protoc_insertion_point(field_release:safex.BlockHeader.prev_hash)
  
  return prev_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_prev_hash(std::string* prev_hash) {
  if (prev_hash != nullptr) {
    
  } else {
    
  }
  prev_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_hash);
  // @@protoc_insertion_point(field_set_allocated:safex.BlockHeader.prev_hash)
}

// -------------------------------------------------------------------

// Block

// .safex.BlockHeader header = 1;
inline bool Block::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Block::has_header() const {
  return _internal_has_header();
}
inline void Block::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::safex::BlockHeader& Block::_internal_header() const {
  const ::safex::BlockHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::safex::BlockHeader*>(
      &::safex::_BlockHeader_default_instance_);
}
inline const ::safex::BlockHeader& Block::header() const {
  // @@protoc_insertion_point(field_get:safex.Block.header)
  return _internal_header();
}
inline ::safex::BlockHeader* Block::release_header() {
  // @@protoc_insertion_point(field_release:safex.Block.header)
  
  ::safex::BlockHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::safex::BlockHeader* Block::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::safex::BlockHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::safex::BlockHeader* Block::mutable_header() {
  // @@protoc_insertion_point(field_mutable:safex.Block.header)
  return _internal_mutable_header();
}
inline void Block::set_allocated_header(::safex::BlockHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:safex.Block.header)
}

// repeated string txs = 2;
inline int Block::_internal_txs_size() const {
  return txs_.size();
}
inline int Block::txs_size() const {
  return _internal_txs_size();
}
inline void Block::clear_txs() {
  txs_.Clear();
}
inline std::string* Block::add_txs() {
  // @@protoc_insertion_point(field_add_mutable:safex.Block.txs)
  return _internal_add_txs();
}
inline const std::string& Block::_internal_txs(int index) const {
  return txs_.Get(index);
}
inline const std::string& Block::txs(int index) const {
  // @@protoc_insertion_point(field_get:safex.Block.txs)
  return _internal_txs(index);
}
inline std::string* Block::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Block.txs)
  return txs_.Mutable(index);
}
inline void Block::set_txs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:safex.Block.txs)
  txs_.Mutable(index)->assign(value);
}
inline void Block::set_txs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:safex.Block.txs)
  txs_.Mutable(index)->assign(std::move(value));
}
inline void Block::set_txs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safex.Block.txs)
}
inline void Block::set_txs(int index, const char* value, size_t size) {
  txs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safex.Block.txs)
}
inline std::string* Block::_internal_add_txs() {
  return txs_.Add();
}
inline void Block::add_txs(const std::string& value) {
  txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safex.Block.txs)
}
inline void Block::add_txs(std::string&& value) {
  txs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safex.Block.txs)
}
inline void Block::add_txs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safex.Block.txs)
}
inline void Block::add_txs(const char* value, size_t size) {
  txs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safex.Block.txs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Block::txs() const {
  // @@protoc_insertion_point(field_list:safex.Block.txs)
  return txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Block::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:safex.Block.txs)
  return &txs_;
}

// string miner_tx = 3;
inline void Block::clear_miner_tx() {
  miner_tx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Block::miner_tx() const {
  // @@protoc_insertion_point(field_get:safex.Block.miner_tx)
  return _internal_miner_tx();
}
inline void Block::set_miner_tx(const std::string& value) {
  _internal_set_miner_tx(value);
  // @@protoc_insertion_point(field_set:safex.Block.miner_tx)
}
inline std::string* Block::mutable_miner_tx() {
  // @@protoc_insertion_point(field_mutable:safex.Block.miner_tx)
  return _internal_mutable_miner_tx();
}
inline const std::string& Block::_internal_miner_tx() const {
  return miner_tx_.GetNoArena();
}
inline void Block::_internal_set_miner_tx(const std::string& value) {
  
  miner_tx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Block::set_miner_tx(std::string&& value) {
  
  miner_tx_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.Block.miner_tx)
}
inline void Block::set_miner_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  miner_tx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Block.miner_tx)
}
inline void Block::set_miner_tx(const char* value, size_t size) {
  
  miner_tx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Block.miner_tx)
}
inline std::string* Block::_internal_mutable_miner_tx() {
  
  return miner_tx_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Block::release_miner_tx() {
  // @@protoc_insertion_point(field_release:safex.Block.miner_tx)
  
  return miner_tx_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_miner_tx(std::string* miner_tx) {
  if (miner_tx != nullptr) {
    
  } else {
    
  }
  miner_tx_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), miner_tx);
  // @@protoc_insertion_point(field_set_allocated:safex.Block.miner_tx)
}

// -------------------------------------------------------------------

// Blocks

// repeated .safex.Block block = 1;
inline int Blocks::_internal_block_size() const {
  return block_.size();
}
inline int Blocks::block_size() const {
  return _internal_block_size();
}
inline void Blocks::clear_block() {
  block_.Clear();
}
inline ::safex::Block* Blocks::mutable_block(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Blocks.block)
  return block_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Block >*
Blocks::mutable_block() {
  // @@protoc_insertion_point(field_mutable_list:safex.Blocks.block)
  return &block_;
}
inline const ::safex::Block& Blocks::_internal_block(int index) const {
  return block_.Get(index);
}
inline const ::safex::Block& Blocks::block(int index) const {
  // @@protoc_insertion_point(field_get:safex.Blocks.block)
  return _internal_block(index);
}
inline ::safex::Block* Blocks::_internal_add_block() {
  return block_.Add();
}
inline ::safex::Block* Blocks::add_block() {
  // @@protoc_insertion_point(field_add:safex.Blocks.block)
  return _internal_add_block();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Block >&
Blocks::block() const {
  // @@protoc_insertion_point(field_list:safex.Blocks.block)
  return block_;
}

// bool status = 2;
inline void Blocks::clear_status() {
  status_ = false;
}
inline bool Blocks::_internal_status() const {
  return status_;
}
inline bool Blocks::status() const {
  // @@protoc_insertion_point(field_get:safex.Blocks.status)
  return _internal_status();
}
inline void Blocks::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void Blocks::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:safex.Blocks.status)
}

// bool untrusted = 3;
inline void Blocks::clear_untrusted() {
  untrusted_ = false;
}
inline bool Blocks::_internal_untrusted() const {
  return untrusted_;
}
inline bool Blocks::untrusted() const {
  // @@protoc_insertion_point(field_get:safex.Blocks.untrusted)
  return _internal_untrusted();
}
inline void Blocks::_internal_set_untrusted(bool value) {
  
  untrusted_ = value;
}
inline void Blocks::set_untrusted(bool value) {
  _internal_set_untrusted(value);
  // @@protoc_insertion_point(field_set:safex.Blocks.untrusted)
}

// string error = 4;
inline void Blocks::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Blocks::error() const {
  // @@protoc_insertion_point(field_get:safex.Blocks.error)
  return _internal_error();
}
inline void Blocks::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:safex.Blocks.error)
}
inline std::string* Blocks::mutable_error() {
  // @@protoc_insertion_point(field_mutable:safex.Blocks.error)
  return _internal_mutable_error();
}
inline const std::string& Blocks::_internal_error() const {
  return error_.GetNoArena();
}
inline void Blocks::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Blocks::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.Blocks.error)
}
inline void Blocks::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Blocks.error)
}
inline void Blocks::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Blocks.error)
}
inline std::string* Blocks::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Blocks::release_error() {
  // @@protoc_insertion_point(field_release:safex.Blocks.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Blocks::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:safex.Blocks.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safex

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blocks_2eproto
