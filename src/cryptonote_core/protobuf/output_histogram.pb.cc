// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: output_histogram.proto

#include "output_histogram.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_output_5fhistogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Histogram_output_5fhistogram_2eproto;
namespace safex {
class HistogramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Histogram> _instance;
} _Histogram_default_instance_;
class HistogramsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Histograms> _instance;
} _Histograms_default_instance_;
}  // namespace safex
static void InitDefaultsscc_info_Histogram_output_5fhistogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_Histogram_default_instance_;
    new (ptr) ::safex::Histogram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::Histogram::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Histogram_output_5fhistogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Histogram_output_5fhistogram_2eproto}, {}};

static void InitDefaultsscc_info_Histograms_output_5fhistogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_Histograms_default_instance_;
    new (ptr) ::safex::Histograms();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::Histograms::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Histograms_output_5fhistogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Histograms_output_5fhistogram_2eproto}, {
      &scc_info_Histogram_output_5fhistogram_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_output_5fhistogram_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_output_5fhistogram_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_output_5fhistogram_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_output_5fhistogram_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::Histogram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::Histogram, amount_),
  PROTOBUF_FIELD_OFFSET(::safex::Histogram, out_type_),
  PROTOBUF_FIELD_OFFSET(::safex::Histogram, recent_instances_),
  PROTOBUF_FIELD_OFFSET(::safex::Histogram, total_instances_),
  PROTOBUF_FIELD_OFFSET(::safex::Histogram, unlocked_instances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::Histograms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::Histograms, histograms_),
  PROTOBUF_FIELD_OFFSET(::safex::Histograms, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::safex::Histogram)},
  { 10, -1, sizeof(::safex::Histograms)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_Histogram_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_Histograms_default_instance_),
};

const char descriptor_table_protodef_output_5fhistogram_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026output_histogram.proto\022\005safex\"|\n\tHisto"
  "gram\022\016\n\006amount\030\001 \001(\004\022\020\n\010out_type\030\002 \001(\004\022\030"
  "\n\020recent_instances\030\003 \001(\004\022\027\n\017total_instan"
  "ces\030\004 \001(\004\022\032\n\022unlocked_instances\030\005 \001(\004\"B\n"
  "\nHistograms\022$\n\nhistograms\030\001 \003(\0132\020.safex."
  "Histogram\022\016\n\006status\030\002 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_output_5fhistogram_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_output_5fhistogram_2eproto_sccs[2] = {
  &scc_info_Histogram_output_5fhistogram_2eproto.base,
  &scc_info_Histograms_output_5fhistogram_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_output_5fhistogram_2eproto_once;
static bool descriptor_table_output_5fhistogram_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_output_5fhistogram_2eproto = {
  &descriptor_table_output_5fhistogram_2eproto_initialized, descriptor_table_protodef_output_5fhistogram_2eproto, "output_histogram.proto", 233,
  &descriptor_table_output_5fhistogram_2eproto_once, descriptor_table_output_5fhistogram_2eproto_sccs, descriptor_table_output_5fhistogram_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_output_5fhistogram_2eproto::offsets,
  file_level_metadata_output_5fhistogram_2eproto, 2, file_level_enum_descriptors_output_5fhistogram_2eproto, file_level_service_descriptors_output_5fhistogram_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_output_5fhistogram_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_output_5fhistogram_2eproto), true);
namespace safex {

// ===================================================================

void Histogram::InitAsDefaultInstance() {
}
class Histogram::_Internal {
 public:
};

Histogram::Histogram()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.Histogram)
}
Histogram::Histogram(const Histogram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlocked_instances_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(unlocked_instances_));
  // @@protoc_insertion_point(copy_constructor:safex.Histogram)
}

void Histogram::SharedCtor() {
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlocked_instances_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(unlocked_instances_));
}

Histogram::~Histogram() {
  // @@protoc_insertion_point(destructor:safex.Histogram)
  SharedDtor();
}

void Histogram::SharedDtor() {
}

void Histogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Histogram& Histogram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Histogram_output_5fhistogram_2eproto.base);
  return *internal_default_instance();
}


void Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlocked_instances_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(unlocked_instances_));
  _internal_metadata_.Clear();
}

const char* Histogram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 out_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          out_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 recent_instances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          recent_instances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_instances = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_instances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 unlocked_instances = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          unlocked_instances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Histogram::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // uint64 out_type = 2;
  if (this->out_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_out_type(), target);
  }

  // uint64 recent_instances = 3;
  if (this->recent_instances() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_recent_instances(), target);
  }

  // uint64 total_instances = 4;
  if (this->total_instances() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_total_instances(), target);
  }

  // uint64 unlocked_instances = 5;
  if (this->unlocked_instances() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_unlocked_instances(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.Histogram)
  return target;
}

size_t Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.Histogram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // uint64 out_type = 2;
  if (this->out_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_out_type());
  }

  // uint64 recent_instances = 3;
  if (this->recent_instances() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recent_instances());
  }

  // uint64 total_instances = 4;
  if (this->total_instances() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_instances());
  }

  // uint64 unlocked_instances = 5;
  if (this->unlocked_instances() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_unlocked_instances());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Histogram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  const Histogram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Histogram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.Histogram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.Histogram)
    MergeFrom(*source);
  }
}

void Histogram::MergeFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.out_type() != 0) {
    _internal_set_out_type(from._internal_out_type());
  }
  if (from.recent_instances() != 0) {
    _internal_set_recent_instances(from._internal_recent_instances());
  }
  if (from.total_instances() != 0) {
    _internal_set_total_instances(from._internal_total_instances());
  }
  if (from.unlocked_instances() != 0) {
    _internal_set_unlocked_instances(from._internal_unlocked_instances());
  }
}

void Histogram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histogram::CopyFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histogram::IsInitialized() const {
  return true;
}

void Histogram::InternalSwap(Histogram* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
  swap(out_type_, other->out_type_);
  swap(recent_instances_, other->recent_instances_);
  swap(total_instances_, other->total_instances_);
  swap(unlocked_instances_, other->unlocked_instances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Histogram::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Histograms::InitAsDefaultInstance() {
}
class Histograms::_Internal {
 public:
};

Histograms::Histograms()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.Histograms)
}
Histograms::Histograms(const Histograms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      histograms_(from.histograms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:safex.Histograms)
}

void Histograms::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Histograms_output_5fhistogram_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Histograms::~Histograms() {
  // @@protoc_insertion_point(destructor:safex.Histograms)
  SharedDtor();
}

void Histograms::SharedDtor() {
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Histograms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Histograms& Histograms::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Histograms_output_5fhistogram_2eproto.base);
  return *internal_default_instance();
}


void Histograms::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.Histograms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  histograms_.Clear();
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Histograms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .safex.Histogram histograms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_histograms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "safex.Histograms.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Histograms::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.Histograms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safex.Histogram histograms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_histograms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_histograms(i), target, stream);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safex.Histograms.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.Histograms)
  return target;
}

size_t Histograms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.Histograms)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safex.Histogram histograms = 1;
  total_size += 1UL * this->_internal_histograms_size();
  for (const auto& msg : this->histograms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Histograms::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.Histograms)
  GOOGLE_DCHECK_NE(&from, this);
  const Histograms* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Histograms>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.Histograms)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.Histograms)
    MergeFrom(*source);
  }
}

void Histograms::MergeFrom(const Histograms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.Histograms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  histograms_.MergeFrom(from.histograms_);
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void Histograms::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.Histograms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histograms::CopyFrom(const Histograms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.Histograms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histograms::IsInitialized() const {
  return true;
}

void Histograms::InternalSwap(Histograms* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  histograms_.InternalSwap(&other->histograms_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Histograms::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safex::Histogram* Arena::CreateMaybeMessage< ::safex::Histogram >(Arena* arena) {
  return Arena::CreateInternal< ::safex::Histogram >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::Histograms* Arena::CreateMaybeMessage< ::safex::Histograms >(Arena* arena) {
  return Arena::CreateInternal< ::safex::Histograms >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
