// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: output_histogram.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_output_5fhistogram_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_output_5fhistogram_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_output_5fhistogram_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_output_5fhistogram_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_output_5fhistogram_2eproto;
namespace safex {
class Histogram;
class HistogramDefaultTypeInternal;
extern HistogramDefaultTypeInternal _Histogram_default_instance_;
class Histograms;
class HistogramsDefaultTypeInternal;
extern HistogramsDefaultTypeInternal _Histograms_default_instance_;
}  // namespace safex
PROTOBUF_NAMESPACE_OPEN
template<> ::safex::Histogram* Arena::CreateMaybeMessage<::safex::Histogram>(Arena*);
template<> ::safex::Histograms* Arena::CreateMaybeMessage<::safex::Histograms>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safex {

// ===================================================================

class Histogram :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.Histogram) */ {
 public:
  Histogram();
  virtual ~Histogram();

  Histogram(const Histogram& from);
  Histogram(Histogram&& from) noexcept
    : Histogram() {
    *this = ::std::move(from);
  }

  inline Histogram& operator=(const Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline Histogram& operator=(Histogram&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Histogram& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Histogram* internal_default_instance() {
    return reinterpret_cast<const Histogram*>(
               &_Histogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Histogram& a, Histogram& b) {
    a.Swap(&b);
  }
  inline void Swap(Histogram* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Histogram* New() const final {
    return CreateMaybeMessage<Histogram>(nullptr);
  }

  Histogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Histogram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Histogram& from);
  void MergeFrom(const Histogram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Histogram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.Histogram";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_output_5fhistogram_2eproto);
    return ::descriptor_table_output_5fhistogram_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kOutTypeFieldNumber = 2,
    kRecentInstancesFieldNumber = 3,
    kTotalInstancesFieldNumber = 4,
    kUnlockedInstancesFieldNumber = 5,
  };
  // uint64 amount = 1;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 out_type = 2;
  void clear_out_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 out_type() const;
  void set_out_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_out_type() const;
  void _internal_set_out_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 recent_instances = 3;
  void clear_recent_instances();
  ::PROTOBUF_NAMESPACE_ID::uint64 recent_instances() const;
  void set_recent_instances(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_recent_instances() const;
  void _internal_set_recent_instances(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_instances = 4;
  void clear_total_instances();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_instances() const;
  void set_total_instances(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_instances() const;
  void _internal_set_total_instances(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 unlocked_instances = 5;
  void clear_unlocked_instances();
  ::PROTOBUF_NAMESPACE_ID::uint64 unlocked_instances() const;
  void set_unlocked_instances(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_unlocked_instances() const;
  void _internal_set_unlocked_instances(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:safex.Histogram)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 out_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 recent_instances_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_instances_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unlocked_instances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_output_5fhistogram_2eproto;
};
// -------------------------------------------------------------------

class Histograms :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.Histograms) */ {
 public:
  Histograms();
  virtual ~Histograms();

  Histograms(const Histograms& from);
  Histograms(Histograms&& from) noexcept
    : Histograms() {
    *this = ::std::move(from);
  }

  inline Histograms& operator=(const Histograms& from) {
    CopyFrom(from);
    return *this;
  }
  inline Histograms& operator=(Histograms&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Histograms& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Histograms* internal_default_instance() {
    return reinterpret_cast<const Histograms*>(
               &_Histograms_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Histograms& a, Histograms& b) {
    a.Swap(&b);
  }
  inline void Swap(Histograms* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Histograms* New() const final {
    return CreateMaybeMessage<Histograms>(nullptr);
  }

  Histograms* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Histograms>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Histograms& from);
  void MergeFrom(const Histograms& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Histograms* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.Histograms";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_output_5fhistogram_2eproto);
    return ::descriptor_table_output_5fhistogram_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistogramsFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .safex.Histogram histograms = 1;
  int histograms_size() const;
  private:
  int _internal_histograms_size() const;
  public:
  void clear_histograms();
  ::safex::Histogram* mutable_histograms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Histogram >*
      mutable_histograms();
  private:
  const ::safex::Histogram& _internal_histograms(int index) const;
  ::safex::Histogram* _internal_add_histograms();
  public:
  const ::safex::Histogram& histograms(int index) const;
  ::safex::Histogram* add_histograms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Histogram >&
      histograms() const;

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:safex.Histograms)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Histogram > histograms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_output_5fhistogram_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Histogram

// uint64 amount = 1;
inline void Histogram::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Histogram::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Histogram::amount() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.amount)
  return _internal_amount();
}
inline void Histogram::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void Histogram::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:safex.Histogram.amount)
}

// uint64 out_type = 2;
inline void Histogram::clear_out_type() {
  out_type_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Histogram::_internal_out_type() const {
  return out_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Histogram::out_type() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.out_type)
  return _internal_out_type();
}
inline void Histogram::_internal_set_out_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  out_type_ = value;
}
inline void Histogram::set_out_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_out_type(value);
  // @@protoc_insertion_point(field_set:safex.Histogram.out_type)
}

// uint64 recent_instances = 3;
inline void Histogram::clear_recent_instances() {
  recent_instances_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Histogram::_internal_recent_instances() const {
  return recent_instances_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Histogram::recent_instances() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.recent_instances)
  return _internal_recent_instances();
}
inline void Histogram::_internal_set_recent_instances(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  recent_instances_ = value;
}
inline void Histogram::set_recent_instances(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_recent_instances(value);
  // @@protoc_insertion_point(field_set:safex.Histogram.recent_instances)
}

// uint64 total_instances = 4;
inline void Histogram::clear_total_instances() {
  total_instances_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Histogram::_internal_total_instances() const {
  return total_instances_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Histogram::total_instances() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.total_instances)
  return _internal_total_instances();
}
inline void Histogram::_internal_set_total_instances(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_instances_ = value;
}
inline void Histogram::set_total_instances(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_instances(value);
  // @@protoc_insertion_point(field_set:safex.Histogram.total_instances)
}

// uint64 unlocked_instances = 5;
inline void Histogram::clear_unlocked_instances() {
  unlocked_instances_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Histogram::_internal_unlocked_instances() const {
  return unlocked_instances_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Histogram::unlocked_instances() const {
  // @@protoc_insertion_point(field_get:safex.Histogram.unlocked_instances)
  return _internal_unlocked_instances();
}
inline void Histogram::_internal_set_unlocked_instances(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  unlocked_instances_ = value;
}
inline void Histogram::set_unlocked_instances(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_unlocked_instances(value);
  // @@protoc_insertion_point(field_set:safex.Histogram.unlocked_instances)
}

// -------------------------------------------------------------------

// Histograms

// repeated .safex.Histogram histograms = 1;
inline int Histograms::_internal_histograms_size() const {
  return histograms_.size();
}
inline int Histograms::histograms_size() const {
  return _internal_histograms_size();
}
inline void Histograms::clear_histograms() {
  histograms_.Clear();
}
inline ::safex::Histogram* Histograms::mutable_histograms(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Histograms.histograms)
  return histograms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Histogram >*
Histograms::mutable_histograms() {
  // @@protoc_insertion_point(field_mutable_list:safex.Histograms.histograms)
  return &histograms_;
}
inline const ::safex::Histogram& Histograms::_internal_histograms(int index) const {
  return histograms_.Get(index);
}
inline const ::safex::Histogram& Histograms::histograms(int index) const {
  // @@protoc_insertion_point(field_get:safex.Histograms.histograms)
  return _internal_histograms(index);
}
inline ::safex::Histogram* Histograms::_internal_add_histograms() {
  return histograms_.Add();
}
inline ::safex::Histogram* Histograms::add_histograms() {
  // @@protoc_insertion_point(field_add:safex.Histograms.histograms)
  return _internal_add_histograms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Histogram >&
Histograms::histograms() const {
  // @@protoc_insertion_point(field_list:safex.Histograms.histograms)
  return histograms_;
}

// string status = 2;
inline void Histograms::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Histograms::status() const {
  // @@protoc_insertion_point(field_get:safex.Histograms.status)
  return _internal_status();
}
inline void Histograms::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:safex.Histograms.status)
}
inline std::string* Histograms::mutable_status() {
  // @@protoc_insertion_point(field_mutable:safex.Histograms.status)
  return _internal_mutable_status();
}
inline const std::string& Histograms::_internal_status() const {
  return status_.GetNoArena();
}
inline void Histograms::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Histograms::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.Histograms.status)
}
inline void Histograms::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Histograms.status)
}
inline void Histograms::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Histograms.status)
}
inline std::string* Histograms::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Histograms::release_status() {
  // @@protoc_insertion_point(field_release:safex.Histograms.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Histograms::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:safex.Histograms.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safex

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_output_5fhistogram_2eproto
