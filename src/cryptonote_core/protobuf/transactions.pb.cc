// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transactions.proto

#include "transactions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transactions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigData_transactions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transactions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Signature_transactions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transactions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Transaction_transactions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transactions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_txin_gen_transactions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transactions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_txin_to_key_transactions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transactions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_txin_token_migration_transactions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transactions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_txin_token_to_key_transactions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transactions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_txin_v_transactions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transactions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_txout_transactions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transactions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_txout_target_v_transactions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transactions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_txout_to_key_transactions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transactions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_txout_token_to_key_transactions_2eproto;
namespace safex {
class txin_genDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<txin_gen> _instance;
} _txin_gen_default_instance_;
class txin_to_keyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<txin_to_key> _instance;
} _txin_to_key_default_instance_;
class txin_token_to_keyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<txin_token_to_key> _instance;
} _txin_token_to_key_default_instance_;
class txin_token_migrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<txin_token_migration> _instance;
} _txin_token_migration_default_instance_;
class txin_vDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<txin_v> _instance;
} _txin_v_default_instance_;
class txout_to_keyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<txout_to_key> _instance;
} _txout_to_key_default_instance_;
class txout_token_to_keyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<txout_token_to_key> _instance;
} _txout_token_to_key_default_instance_;
class txout_target_vDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<txout_target_v> _instance;
} _txout_target_v_default_instance_;
class txoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<txout> _instance;
} _txout_default_instance_;
class SigDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigData> _instance;
} _SigData_default_instance_;
class SignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signature> _instance;
} _Signature_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class TransactionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transactions> _instance;
} _Transactions_default_instance_;
}  // namespace safex
static void InitDefaultsscc_info_SigData_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_SigData_default_instance_;
    new (ptr) ::safex::SigData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::SigData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigData_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigData_transactions_2eproto}, {}};

static void InitDefaultsscc_info_Signature_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_Signature_default_instance_;
    new (ptr) ::safex::Signature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::Signature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Signature_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Signature_transactions_2eproto}, {
      &scc_info_SigData_transactions_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_Transaction_default_instance_;
    new (ptr) ::safex::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Transaction_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Transaction_transactions_2eproto}, {
      &scc_info_txin_v_transactions_2eproto.base,
      &scc_info_txout_transactions_2eproto.base,
      &scc_info_Signature_transactions_2eproto.base,}};

static void InitDefaultsscc_info_Transactions_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_Transactions_default_instance_;
    new (ptr) ::safex::Transactions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::Transactions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transactions_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transactions_transactions_2eproto}, {
      &scc_info_Transaction_transactions_2eproto.base,}};

static void InitDefaultsscc_info_txin_gen_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_txin_gen_default_instance_;
    new (ptr) ::safex::txin_gen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::txin_gen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_txin_gen_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_txin_gen_transactions_2eproto}, {}};

static void InitDefaultsscc_info_txin_to_key_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_txin_to_key_default_instance_;
    new (ptr) ::safex::txin_to_key();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::txin_to_key::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_txin_to_key_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_txin_to_key_transactions_2eproto}, {}};

static void InitDefaultsscc_info_txin_token_migration_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_txin_token_migration_default_instance_;
    new (ptr) ::safex::txin_token_migration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::txin_token_migration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_txin_token_migration_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_txin_token_migration_transactions_2eproto}, {}};

static void InitDefaultsscc_info_txin_token_to_key_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_txin_token_to_key_default_instance_;
    new (ptr) ::safex::txin_token_to_key();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::txin_token_to_key::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_txin_token_to_key_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_txin_token_to_key_transactions_2eproto}, {}};

static void InitDefaultsscc_info_txin_v_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_txin_v_default_instance_;
    new (ptr) ::safex::txin_v();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::txin_v::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_txin_v_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_txin_v_transactions_2eproto}, {
      &scc_info_txin_gen_transactions_2eproto.base,
      &scc_info_txin_to_key_transactions_2eproto.base,
      &scc_info_txin_token_to_key_transactions_2eproto.base,
      &scc_info_txin_token_migration_transactions_2eproto.base,}};

static void InitDefaultsscc_info_txout_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_txout_default_instance_;
    new (ptr) ::safex::txout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::txout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_txout_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_txout_transactions_2eproto}, {
      &scc_info_txout_target_v_transactions_2eproto.base,}};

static void InitDefaultsscc_info_txout_target_v_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_txout_target_v_default_instance_;
    new (ptr) ::safex::txout_target_v();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::txout_target_v::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_txout_target_v_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_txout_target_v_transactions_2eproto}, {
      &scc_info_txout_to_key_transactions_2eproto.base,
      &scc_info_txout_token_to_key_transactions_2eproto.base,}};

static void InitDefaultsscc_info_txout_to_key_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_txout_to_key_default_instance_;
    new (ptr) ::safex::txout_to_key();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::txout_to_key::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_txout_to_key_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_txout_to_key_transactions_2eproto}, {}};

static void InitDefaultsscc_info_txout_token_to_key_transactions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safex::_txout_token_to_key_default_instance_;
    new (ptr) ::safex::txout_token_to_key();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safex::txout_token_to_key::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_txout_token_to_key_transactions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_txout_token_to_key_transactions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transactions_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transactions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transactions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transactions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::txin_gen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::txin_gen, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::txin_to_key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::txin_to_key, amount_),
  PROTOBUF_FIELD_OFFSET(::safex::txin_to_key, k_image_),
  PROTOBUF_FIELD_OFFSET(::safex::txin_to_key, key_offsets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::txin_token_to_key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::txin_token_to_key, token_amount_),
  PROTOBUF_FIELD_OFFSET(::safex::txin_token_to_key, k_image_),
  PROTOBUF_FIELD_OFFSET(::safex::txin_token_to_key, key_offsets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::txin_token_migration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::txin_token_migration, token_amount_),
  PROTOBUF_FIELD_OFFSET(::safex::txin_token_migration, bitcoin_burn_transaction_),
  PROTOBUF_FIELD_OFFSET(::safex::txin_token_migration, k_image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::txin_v, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::txin_v, txin_gen_),
  PROTOBUF_FIELD_OFFSET(::safex::txin_v, txin_to_key_),
  PROTOBUF_FIELD_OFFSET(::safex::txin_v, txin_token_to_key_),
  PROTOBUF_FIELD_OFFSET(::safex::txin_v, txin_token_migration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::txout_to_key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::txout_to_key, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::txout_token_to_key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::txout_token_to_key, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::txout_target_v, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::txout_target_v, txout_to_key_),
  PROTOBUF_FIELD_OFFSET(::safex::txout_target_v, txout_token_to_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::txout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::txout, amount_),
  PROTOBUF_FIELD_OFFSET(::safex::txout, token_amount_),
  PROTOBUF_FIELD_OFFSET(::safex::txout, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::SigData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::SigData, r_),
  PROTOBUF_FIELD_OFFSET(::safex::SigData, c_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::Signature, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, version_),
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, unlock_time_),
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, extra_),
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, vin_),
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, vout_),
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, signatures_),
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, block_height_),
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, block_timestamp_),
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, double_spend_seen_),
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, in_pool_),
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, output_indices_),
  PROTOBUF_FIELD_OFFSET(::safex::Transaction, tx_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safex::Transactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safex::Transactions, tx_),
  PROTOBUF_FIELD_OFFSET(::safex::Transactions, missed_txs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::safex::txin_gen)},
  { 6, -1, sizeof(::safex::txin_to_key)},
  { 14, -1, sizeof(::safex::txin_token_to_key)},
  { 22, -1, sizeof(::safex::txin_token_migration)},
  { 30, -1, sizeof(::safex::txin_v)},
  { 39, -1, sizeof(::safex::txout_to_key)},
  { 45, -1, sizeof(::safex::txout_token_to_key)},
  { 51, -1, sizeof(::safex::txout_target_v)},
  { 58, -1, sizeof(::safex::txout)},
  { 66, -1, sizeof(::safex::SigData)},
  { 73, -1, sizeof(::safex::Signature)},
  { 79, -1, sizeof(::safex::Transaction)},
  { 96, -1, sizeof(::safex::Transactions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_txin_gen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_txin_to_key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_txin_token_to_key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_txin_token_migration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_txin_v_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_txout_to_key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_txout_token_to_key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_txout_target_v_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_txout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_SigData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_Signature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safex::_Transactions_default_instance_),
};

const char descriptor_table_protodef_transactions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022transactions.proto\022\005safex\"\032\n\010txin_gen\022"
  "\016\n\006height\030\001 \001(\004\"C\n\013txin_to_key\022\016\n\006amount"
  "\030\001 \001(\004\022\017\n\007k_image\030\002 \001(\014\022\023\n\013key_offsets\030\003"
  " \003(\004\"O\n\021txin_token_to_key\022\024\n\014token_amoun"
  "t\030\001 \001(\004\022\017\n\007k_image\030\002 \001(\014\022\023\n\013key_offsets\030"
  "\003 \003(\004\"_\n\024txin_token_migration\022\024\n\014token_a"
  "mount\030\001 \001(\004\022 \n\030bitcoin_burn_transaction\030"
  "\002 \001(\t\022\017\n\007k_image\030\003 \001(\014\"\304\001\n\006txin_v\022!\n\010txi"
  "n_gen\030\001 \001(\0132\017.safex.txin_gen\022\'\n\013txin_to_"
  "key\030\002 \001(\0132\022.safex.txin_to_key\0223\n\021txin_to"
  "ken_to_key\030\003 \001(\0132\030.safex.txin_token_to_k"
  "ey\0229\n\024txin_token_migration\030\004 \001(\0132\033.safex"
  ".txin_token_migration\"\033\n\014txout_to_key\022\013\n"
  "\003key\030\001 \001(\014\"!\n\022txout_token_to_key\022\013\n\003key\030"
  "\001 \001(\014\"r\n\016txout_target_v\022)\n\014txout_to_key\030"
  "\001 \001(\0132\023.safex.txout_to_key\0225\n\022txout_toke"
  "n_to_key\030\002 \001(\0132\031.safex.txout_token_to_ke"
  "y\"T\n\005txout\022\016\n\006amount\030\001 \001(\004\022\024\n\014token_amou"
  "nt\030\002 \001(\004\022%\n\006target\030\003 \001(\0132\025.safex.txout_t"
  "arget_v\"\037\n\007SigData\022\t\n\001r\030\001 \001(\014\022\t\n\001c\030\002 \001(\014"
  "\".\n\tSignature\022!\n\tsignature\030\001 \003(\0132\016.safex"
  ".SigData\"\244\002\n\013Transaction\022\017\n\007version\030\001 \001("
  "\004\022\023\n\013unlock_time\030\002 \001(\004\022\r\n\005extra\030\003 \001(\014\022\032\n"
  "\003vin\030\004 \003(\0132\r.safex.txin_v\022\032\n\004vout\030\005 \003(\0132"
  "\014.safex.txout\022$\n\nsignatures\030\006 \003(\0132\020.safe"
  "x.Signature\022\024\n\014block_height\030\007 \001(\004\022\027\n\017blo"
  "ck_timestamp\030\010 \001(\004\022\031\n\021double_spend_seen\030"
  "\t \001(\010\022\017\n\007in_pool\030\n \001(\010\022\026\n\016output_indices"
  "\030\013 \003(\004\022\017\n\007tx_hash\030\014 \001(\t\"B\n\014Transactions\022"
  "\036\n\002tx\030\001 \003(\0132\022.safex.Transaction\022\022\n\nmisse"
  "d_txs\030\002 \003(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transactions_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transactions_2eproto_sccs[13] = {
  &scc_info_SigData_transactions_2eproto.base,
  &scc_info_Signature_transactions_2eproto.base,
  &scc_info_Transaction_transactions_2eproto.base,
  &scc_info_Transactions_transactions_2eproto.base,
  &scc_info_txin_gen_transactions_2eproto.base,
  &scc_info_txin_to_key_transactions_2eproto.base,
  &scc_info_txin_token_migration_transactions_2eproto.base,
  &scc_info_txin_token_to_key_transactions_2eproto.base,
  &scc_info_txin_v_transactions_2eproto.base,
  &scc_info_txout_transactions_2eproto.base,
  &scc_info_txout_target_v_transactions_2eproto.base,
  &scc_info_txout_to_key_transactions_2eproto.base,
  &scc_info_txout_token_to_key_transactions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transactions_2eproto_once;
static bool descriptor_table_transactions_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transactions_2eproto = {
  &descriptor_table_transactions_2eproto_initialized, descriptor_table_protodef_transactions_2eproto, "transactions.proto", 1219,
  &descriptor_table_transactions_2eproto_once, descriptor_table_transactions_2eproto_sccs, descriptor_table_transactions_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_transactions_2eproto::offsets,
  file_level_metadata_transactions_2eproto, 13, file_level_enum_descriptors_transactions_2eproto, file_level_service_descriptors_transactions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transactions_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transactions_2eproto), true);
namespace safex {

// ===================================================================

void txin_gen::InitAsDefaultInstance() {
}
class txin_gen::_Internal {
 public:
};

txin_gen::txin_gen()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txin_gen)
}
txin_gen::txin_gen(const txin_gen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:safex.txin_gen)
}

void txin_gen::SharedCtor() {
  height_ = PROTOBUF_ULONGLONG(0);
}

txin_gen::~txin_gen() {
  // @@protoc_insertion_point(destructor:safex.txin_gen)
  SharedDtor();
}

void txin_gen::SharedDtor() {
}

void txin_gen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const txin_gen& txin_gen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_txin_gen_transactions_2eproto.base);
  return *internal_default_instance();
}


void txin_gen::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txin_gen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* txin_gen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* txin_gen::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txin_gen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.txin_gen)
  return target;
}

size_t txin_gen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txin_gen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void txin_gen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txin_gen)
  GOOGLE_DCHECK_NE(&from, this);
  const txin_gen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<txin_gen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txin_gen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txin_gen)
    MergeFrom(*source);
  }
}

void txin_gen::MergeFrom(const txin_gen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txin_gen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void txin_gen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txin_gen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txin_gen::CopyFrom(const txin_gen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txin_gen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txin_gen::IsInitialized() const {
  return true;
}

void txin_gen::InternalSwap(txin_gen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata txin_gen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void txin_to_key::InitAsDefaultInstance() {
}
class txin_to_key::_Internal {
 public:
};

txin_to_key::txin_to_key()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txin_to_key)
}
txin_to_key::txin_to_key(const txin_to_key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      key_offsets_(from.key_offsets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  k_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_k_image().empty()) {
    k_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.k_image_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:safex.txin_to_key)
}

void txin_to_key::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_txin_to_key_transactions_2eproto.base);
  k_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_ULONGLONG(0);
}

txin_to_key::~txin_to_key() {
  // @@protoc_insertion_point(destructor:safex.txin_to_key)
  SharedDtor();
}

void txin_to_key::SharedDtor() {
  k_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void txin_to_key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const txin_to_key& txin_to_key::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_txin_to_key_transactions_2eproto.base);
  return *internal_default_instance();
}


void txin_to_key::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txin_to_key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_offsets_.Clear();
  k_image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* txin_to_key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes k_image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_k_image(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 key_offsets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_key_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_key_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* txin_to_key::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txin_to_key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // bytes k_image = 2;
  if (this->k_image().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_k_image(), target);
  }

  // repeated uint64 key_offsets = 3;
  {
    int byte_size = _key_offsets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_key_offsets(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.txin_to_key)
  return target;
}

size_t txin_to_key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txin_to_key)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 key_offsets = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->key_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _key_offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes k_image = 2;
  if (this->k_image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k_image());
  }

  // uint64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void txin_to_key::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txin_to_key)
  GOOGLE_DCHECK_NE(&from, this);
  const txin_to_key* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<txin_to_key>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txin_to_key)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txin_to_key)
    MergeFrom(*source);
  }
}

void txin_to_key::MergeFrom(const txin_to_key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txin_to_key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_offsets_.MergeFrom(from.key_offsets_);
  if (from.k_image().size() > 0) {

    k_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.k_image_);
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void txin_to_key::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txin_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txin_to_key::CopyFrom(const txin_to_key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txin_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txin_to_key::IsInitialized() const {
  return true;
}

void txin_to_key::InternalSwap(txin_to_key* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_offsets_.InternalSwap(&other->key_offsets_);
  k_image_.Swap(&other->k_image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata txin_to_key::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void txin_token_to_key::InitAsDefaultInstance() {
}
class txin_token_to_key::_Internal {
 public:
};

txin_token_to_key::txin_token_to_key()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txin_token_to_key)
}
txin_token_to_key::txin_token_to_key(const txin_token_to_key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      key_offsets_(from.key_offsets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  k_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_k_image().empty()) {
    k_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.k_image_);
  }
  token_amount_ = from.token_amount_;
  // @@protoc_insertion_point(copy_constructor:safex.txin_token_to_key)
}

void txin_token_to_key::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_txin_token_to_key_transactions_2eproto.base);
  k_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_amount_ = PROTOBUF_ULONGLONG(0);
}

txin_token_to_key::~txin_token_to_key() {
  // @@protoc_insertion_point(destructor:safex.txin_token_to_key)
  SharedDtor();
}

void txin_token_to_key::SharedDtor() {
  k_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void txin_token_to_key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const txin_token_to_key& txin_token_to_key::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_txin_token_to_key_transactions_2eproto.base);
  return *internal_default_instance();
}


void txin_token_to_key::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txin_token_to_key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_offsets_.Clear();
  k_image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_amount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* txin_token_to_key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 token_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          token_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes k_image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_k_image(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 key_offsets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_key_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_key_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* txin_token_to_key::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txin_token_to_key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 token_amount = 1;
  if (this->token_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_token_amount(), target);
  }

  // bytes k_image = 2;
  if (this->k_image().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_k_image(), target);
  }

  // repeated uint64 key_offsets = 3;
  {
    int byte_size = _key_offsets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_key_offsets(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.txin_token_to_key)
  return target;
}

size_t txin_token_to_key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txin_token_to_key)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 key_offsets = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->key_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _key_offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes k_image = 2;
  if (this->k_image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k_image());
  }

  // uint64 token_amount = 1;
  if (this->token_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_token_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void txin_token_to_key::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txin_token_to_key)
  GOOGLE_DCHECK_NE(&from, this);
  const txin_token_to_key* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<txin_token_to_key>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txin_token_to_key)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txin_token_to_key)
    MergeFrom(*source);
  }
}

void txin_token_to_key::MergeFrom(const txin_token_to_key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txin_token_to_key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_offsets_.MergeFrom(from.key_offsets_);
  if (from.k_image().size() > 0) {

    k_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.k_image_);
  }
  if (from.token_amount() != 0) {
    _internal_set_token_amount(from._internal_token_amount());
  }
}

void txin_token_to_key::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txin_token_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txin_token_to_key::CopyFrom(const txin_token_to_key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txin_token_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txin_token_to_key::IsInitialized() const {
  return true;
}

void txin_token_to_key::InternalSwap(txin_token_to_key* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_offsets_.InternalSwap(&other->key_offsets_);
  k_image_.Swap(&other->k_image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(token_amount_, other->token_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata txin_token_to_key::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void txin_token_migration::InitAsDefaultInstance() {
}
class txin_token_migration::_Internal {
 public:
};

txin_token_migration::txin_token_migration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txin_token_migration)
}
txin_token_migration::txin_token_migration(const txin_token_migration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bitcoin_burn_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bitcoin_burn_transaction().empty()) {
    bitcoin_burn_transaction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bitcoin_burn_transaction_);
  }
  k_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_k_image().empty()) {
    k_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.k_image_);
  }
  token_amount_ = from.token_amount_;
  // @@protoc_insertion_point(copy_constructor:safex.txin_token_migration)
}

void txin_token_migration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_txin_token_migration_transactions_2eproto.base);
  bitcoin_burn_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_amount_ = PROTOBUF_ULONGLONG(0);
}

txin_token_migration::~txin_token_migration() {
  // @@protoc_insertion_point(destructor:safex.txin_token_migration)
  SharedDtor();
}

void txin_token_migration::SharedDtor() {
  bitcoin_burn_transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void txin_token_migration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const txin_token_migration& txin_token_migration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_txin_token_migration_transactions_2eproto.base);
  return *internal_default_instance();
}


void txin_token_migration::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txin_token_migration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bitcoin_burn_transaction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_amount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* txin_token_migration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 token_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          token_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bitcoin_burn_transaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_bitcoin_burn_transaction(), ptr, ctx, "safex.txin_token_migration.bitcoin_burn_transaction");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes k_image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_k_image(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* txin_token_migration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txin_token_migration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 token_amount = 1;
  if (this->token_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_token_amount(), target);
  }

  // string bitcoin_burn_transaction = 2;
  if (this->bitcoin_burn_transaction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bitcoin_burn_transaction().data(), static_cast<int>(this->_internal_bitcoin_burn_transaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safex.txin_token_migration.bitcoin_burn_transaction");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bitcoin_burn_transaction(), target);
  }

  // bytes k_image = 3;
  if (this->k_image().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_k_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.txin_token_migration)
  return target;
}

size_t txin_token_migration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txin_token_migration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bitcoin_burn_transaction = 2;
  if (this->bitcoin_burn_transaction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bitcoin_burn_transaction());
  }

  // bytes k_image = 3;
  if (this->k_image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k_image());
  }

  // uint64 token_amount = 1;
  if (this->token_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_token_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void txin_token_migration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txin_token_migration)
  GOOGLE_DCHECK_NE(&from, this);
  const txin_token_migration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<txin_token_migration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txin_token_migration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txin_token_migration)
    MergeFrom(*source);
  }
}

void txin_token_migration::MergeFrom(const txin_token_migration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txin_token_migration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bitcoin_burn_transaction().size() > 0) {

    bitcoin_burn_transaction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bitcoin_burn_transaction_);
  }
  if (from.k_image().size() > 0) {

    k_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.k_image_);
  }
  if (from.token_amount() != 0) {
    _internal_set_token_amount(from._internal_token_amount());
  }
}

void txin_token_migration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txin_token_migration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txin_token_migration::CopyFrom(const txin_token_migration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txin_token_migration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txin_token_migration::IsInitialized() const {
  return true;
}

void txin_token_migration::InternalSwap(txin_token_migration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bitcoin_burn_transaction_.Swap(&other->bitcoin_burn_transaction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  k_image_.Swap(&other->k_image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(token_amount_, other->token_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata txin_token_migration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void txin_v::InitAsDefaultInstance() {
  ::safex::_txin_v_default_instance_._instance.get_mutable()->txin_gen_ = const_cast< ::safex::txin_gen*>(
      ::safex::txin_gen::internal_default_instance());
  ::safex::_txin_v_default_instance_._instance.get_mutable()->txin_to_key_ = const_cast< ::safex::txin_to_key*>(
      ::safex::txin_to_key::internal_default_instance());
  ::safex::_txin_v_default_instance_._instance.get_mutable()->txin_token_to_key_ = const_cast< ::safex::txin_token_to_key*>(
      ::safex::txin_token_to_key::internal_default_instance());
  ::safex::_txin_v_default_instance_._instance.get_mutable()->txin_token_migration_ = const_cast< ::safex::txin_token_migration*>(
      ::safex::txin_token_migration::internal_default_instance());
}
class txin_v::_Internal {
 public:
  static const ::safex::txin_gen& txin_gen(const txin_v* msg);
  static const ::safex::txin_to_key& txin_to_key(const txin_v* msg);
  static const ::safex::txin_token_to_key& txin_token_to_key(const txin_v* msg);
  static const ::safex::txin_token_migration& txin_token_migration(const txin_v* msg);
};

const ::safex::txin_gen&
txin_v::_Internal::txin_gen(const txin_v* msg) {
  return *msg->txin_gen_;
}
const ::safex::txin_to_key&
txin_v::_Internal::txin_to_key(const txin_v* msg) {
  return *msg->txin_to_key_;
}
const ::safex::txin_token_to_key&
txin_v::_Internal::txin_token_to_key(const txin_v* msg) {
  return *msg->txin_token_to_key_;
}
const ::safex::txin_token_migration&
txin_v::_Internal::txin_token_migration(const txin_v* msg) {
  return *msg->txin_token_migration_;
}
txin_v::txin_v()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txin_v)
}
txin_v::txin_v(const txin_v& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_txin_gen()) {
    txin_gen_ = new ::safex::txin_gen(*from.txin_gen_);
  } else {
    txin_gen_ = nullptr;
  }
  if (from._internal_has_txin_to_key()) {
    txin_to_key_ = new ::safex::txin_to_key(*from.txin_to_key_);
  } else {
    txin_to_key_ = nullptr;
  }
  if (from._internal_has_txin_token_to_key()) {
    txin_token_to_key_ = new ::safex::txin_token_to_key(*from.txin_token_to_key_);
  } else {
    txin_token_to_key_ = nullptr;
  }
  if (from._internal_has_txin_token_migration()) {
    txin_token_migration_ = new ::safex::txin_token_migration(*from.txin_token_migration_);
  } else {
    txin_token_migration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safex.txin_v)
}

void txin_v::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_txin_v_transactions_2eproto.base);
  ::memset(&txin_gen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txin_token_migration_) -
      reinterpret_cast<char*>(&txin_gen_)) + sizeof(txin_token_migration_));
}

txin_v::~txin_v() {
  // @@protoc_insertion_point(destructor:safex.txin_v)
  SharedDtor();
}

void txin_v::SharedDtor() {
  if (this != internal_default_instance()) delete txin_gen_;
  if (this != internal_default_instance()) delete txin_to_key_;
  if (this != internal_default_instance()) delete txin_token_to_key_;
  if (this != internal_default_instance()) delete txin_token_migration_;
}

void txin_v::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const txin_v& txin_v::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_txin_v_transactions_2eproto.base);
  return *internal_default_instance();
}


void txin_v::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txin_v)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && txin_gen_ != nullptr) {
    delete txin_gen_;
  }
  txin_gen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && txin_to_key_ != nullptr) {
    delete txin_to_key_;
  }
  txin_to_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && txin_token_to_key_ != nullptr) {
    delete txin_token_to_key_;
  }
  txin_token_to_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && txin_token_migration_ != nullptr) {
    delete txin_token_migration_;
  }
  txin_token_migration_ = nullptr;
  _internal_metadata_.Clear();
}

const char* txin_v::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safex.txin_gen txin_gen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_txin_gen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safex.txin_to_key txin_to_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_txin_to_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safex.txin_token_to_key txin_token_to_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_txin_token_to_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safex.txin_token_migration txin_token_migration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_txin_token_migration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* txin_v::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txin_v)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safex.txin_gen txin_gen = 1;
  if (this->has_txin_gen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::txin_gen(this), target, stream);
  }

  // .safex.txin_to_key txin_to_key = 2;
  if (this->has_txin_to_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::txin_to_key(this), target, stream);
  }

  // .safex.txin_token_to_key txin_token_to_key = 3;
  if (this->has_txin_token_to_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::txin_token_to_key(this), target, stream);
  }

  // .safex.txin_token_migration txin_token_migration = 4;
  if (this->has_txin_token_migration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::txin_token_migration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.txin_v)
  return target;
}

size_t txin_v::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txin_v)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safex.txin_gen txin_gen = 1;
  if (this->has_txin_gen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *txin_gen_);
  }

  // .safex.txin_to_key txin_to_key = 2;
  if (this->has_txin_to_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *txin_to_key_);
  }

  // .safex.txin_token_to_key txin_token_to_key = 3;
  if (this->has_txin_token_to_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *txin_token_to_key_);
  }

  // .safex.txin_token_migration txin_token_migration = 4;
  if (this->has_txin_token_migration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *txin_token_migration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void txin_v::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txin_v)
  GOOGLE_DCHECK_NE(&from, this);
  const txin_v* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<txin_v>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txin_v)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txin_v)
    MergeFrom(*source);
  }
}

void txin_v::MergeFrom(const txin_v& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txin_v)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_txin_gen()) {
    _internal_mutable_txin_gen()->::safex::txin_gen::MergeFrom(from._internal_txin_gen());
  }
  if (from.has_txin_to_key()) {
    _internal_mutable_txin_to_key()->::safex::txin_to_key::MergeFrom(from._internal_txin_to_key());
  }
  if (from.has_txin_token_to_key()) {
    _internal_mutable_txin_token_to_key()->::safex::txin_token_to_key::MergeFrom(from._internal_txin_token_to_key());
  }
  if (from.has_txin_token_migration()) {
    _internal_mutable_txin_token_migration()->::safex::txin_token_migration::MergeFrom(from._internal_txin_token_migration());
  }
}

void txin_v::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txin_v)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txin_v::CopyFrom(const txin_v& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txin_v)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txin_v::IsInitialized() const {
  return true;
}

void txin_v::InternalSwap(txin_v* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(txin_gen_, other->txin_gen_);
  swap(txin_to_key_, other->txin_to_key_);
  swap(txin_token_to_key_, other->txin_token_to_key_);
  swap(txin_token_migration_, other->txin_token_migration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata txin_v::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void txout_to_key::InitAsDefaultInstance() {
}
class txout_to_key::_Internal {
 public:
};

txout_to_key::txout_to_key()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txout_to_key)
}
txout_to_key::txout_to_key(const txout_to_key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:safex.txout_to_key)
}

void txout_to_key::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_txout_to_key_transactions_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

txout_to_key::~txout_to_key() {
  // @@protoc_insertion_point(destructor:safex.txout_to_key)
  SharedDtor();
}

void txout_to_key::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void txout_to_key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const txout_to_key& txout_to_key::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_txout_to_key_transactions_2eproto.base);
  return *internal_default_instance();
}


void txout_to_key::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txout_to_key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* txout_to_key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* txout_to_key::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txout_to_key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.txout_to_key)
  return target;
}

size_t txout_to_key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txout_to_key)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void txout_to_key::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txout_to_key)
  GOOGLE_DCHECK_NE(&from, this);
  const txout_to_key* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<txout_to_key>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txout_to_key)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txout_to_key)
    MergeFrom(*source);
  }
}

void txout_to_key::MergeFrom(const txout_to_key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txout_to_key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void txout_to_key::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txout_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txout_to_key::CopyFrom(const txout_to_key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txout_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txout_to_key::IsInitialized() const {
  return true;
}

void txout_to_key::InternalSwap(txout_to_key* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata txout_to_key::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void txout_token_to_key::InitAsDefaultInstance() {
}
class txout_token_to_key::_Internal {
 public:
};

txout_token_to_key::txout_token_to_key()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txout_token_to_key)
}
txout_token_to_key::txout_token_to_key(const txout_token_to_key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:safex.txout_token_to_key)
}

void txout_token_to_key::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_txout_token_to_key_transactions_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

txout_token_to_key::~txout_token_to_key() {
  // @@protoc_insertion_point(destructor:safex.txout_token_to_key)
  SharedDtor();
}

void txout_token_to_key::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void txout_token_to_key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const txout_token_to_key& txout_token_to_key::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_txout_token_to_key_transactions_2eproto.base);
  return *internal_default_instance();
}


void txout_token_to_key::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txout_token_to_key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* txout_token_to_key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* txout_token_to_key::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txout_token_to_key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.txout_token_to_key)
  return target;
}

size_t txout_token_to_key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txout_token_to_key)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void txout_token_to_key::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txout_token_to_key)
  GOOGLE_DCHECK_NE(&from, this);
  const txout_token_to_key* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<txout_token_to_key>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txout_token_to_key)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txout_token_to_key)
    MergeFrom(*source);
  }
}

void txout_token_to_key::MergeFrom(const txout_token_to_key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txout_token_to_key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void txout_token_to_key::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txout_token_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txout_token_to_key::CopyFrom(const txout_token_to_key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txout_token_to_key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txout_token_to_key::IsInitialized() const {
  return true;
}

void txout_token_to_key::InternalSwap(txout_token_to_key* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata txout_token_to_key::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void txout_target_v::InitAsDefaultInstance() {
  ::safex::_txout_target_v_default_instance_._instance.get_mutable()->txout_to_key_ = const_cast< ::safex::txout_to_key*>(
      ::safex::txout_to_key::internal_default_instance());
  ::safex::_txout_target_v_default_instance_._instance.get_mutable()->txout_token_to_key_ = const_cast< ::safex::txout_token_to_key*>(
      ::safex::txout_token_to_key::internal_default_instance());
}
class txout_target_v::_Internal {
 public:
  static const ::safex::txout_to_key& txout_to_key(const txout_target_v* msg);
  static const ::safex::txout_token_to_key& txout_token_to_key(const txout_target_v* msg);
};

const ::safex::txout_to_key&
txout_target_v::_Internal::txout_to_key(const txout_target_v* msg) {
  return *msg->txout_to_key_;
}
const ::safex::txout_token_to_key&
txout_target_v::_Internal::txout_token_to_key(const txout_target_v* msg) {
  return *msg->txout_token_to_key_;
}
txout_target_v::txout_target_v()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txout_target_v)
}
txout_target_v::txout_target_v(const txout_target_v& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_txout_to_key()) {
    txout_to_key_ = new ::safex::txout_to_key(*from.txout_to_key_);
  } else {
    txout_to_key_ = nullptr;
  }
  if (from._internal_has_txout_token_to_key()) {
    txout_token_to_key_ = new ::safex::txout_token_to_key(*from.txout_token_to_key_);
  } else {
    txout_token_to_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safex.txout_target_v)
}

void txout_target_v::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_txout_target_v_transactions_2eproto.base);
  ::memset(&txout_to_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txout_token_to_key_) -
      reinterpret_cast<char*>(&txout_to_key_)) + sizeof(txout_token_to_key_));
}

txout_target_v::~txout_target_v() {
  // @@protoc_insertion_point(destructor:safex.txout_target_v)
  SharedDtor();
}

void txout_target_v::SharedDtor() {
  if (this != internal_default_instance()) delete txout_to_key_;
  if (this != internal_default_instance()) delete txout_token_to_key_;
}

void txout_target_v::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const txout_target_v& txout_target_v::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_txout_target_v_transactions_2eproto.base);
  return *internal_default_instance();
}


void txout_target_v::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txout_target_v)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && txout_to_key_ != nullptr) {
    delete txout_to_key_;
  }
  txout_to_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && txout_token_to_key_ != nullptr) {
    delete txout_token_to_key_;
  }
  txout_token_to_key_ = nullptr;
  _internal_metadata_.Clear();
}

const char* txout_target_v::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safex.txout_to_key txout_to_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_txout_to_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safex.txout_token_to_key txout_token_to_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_txout_token_to_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* txout_target_v::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txout_target_v)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safex.txout_to_key txout_to_key = 1;
  if (this->has_txout_to_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::txout_to_key(this), target, stream);
  }

  // .safex.txout_token_to_key txout_token_to_key = 2;
  if (this->has_txout_token_to_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::txout_token_to_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.txout_target_v)
  return target;
}

size_t txout_target_v::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txout_target_v)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safex.txout_to_key txout_to_key = 1;
  if (this->has_txout_to_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *txout_to_key_);
  }

  // .safex.txout_token_to_key txout_token_to_key = 2;
  if (this->has_txout_token_to_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *txout_token_to_key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void txout_target_v::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txout_target_v)
  GOOGLE_DCHECK_NE(&from, this);
  const txout_target_v* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<txout_target_v>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txout_target_v)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txout_target_v)
    MergeFrom(*source);
  }
}

void txout_target_v::MergeFrom(const txout_target_v& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txout_target_v)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_txout_to_key()) {
    _internal_mutable_txout_to_key()->::safex::txout_to_key::MergeFrom(from._internal_txout_to_key());
  }
  if (from.has_txout_token_to_key()) {
    _internal_mutable_txout_token_to_key()->::safex::txout_token_to_key::MergeFrom(from._internal_txout_token_to_key());
  }
}

void txout_target_v::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txout_target_v)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txout_target_v::CopyFrom(const txout_target_v& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txout_target_v)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txout_target_v::IsInitialized() const {
  return true;
}

void txout_target_v::InternalSwap(txout_target_v* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(txout_to_key_, other->txout_to_key_);
  swap(txout_token_to_key_, other->txout_token_to_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata txout_target_v::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void txout::InitAsDefaultInstance() {
  ::safex::_txout_default_instance_._instance.get_mutable()->target_ = const_cast< ::safex::txout_target_v*>(
      ::safex::txout_target_v::internal_default_instance());
}
class txout::_Internal {
 public:
  static const ::safex::txout_target_v& target(const txout* msg);
};

const ::safex::txout_target_v&
txout::_Internal::target(const txout* msg) {
  return *msg->target_;
}
txout::txout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.txout)
}
txout::txout(const txout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::safex::txout_target_v(*from.target_);
  } else {
    target_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_amount_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(token_amount_));
  // @@protoc_insertion_point(copy_constructor:safex.txout)
}

void txout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_txout_transactions_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_amount_) -
      reinterpret_cast<char*>(&target_)) + sizeof(token_amount_));
}

txout::~txout() {
  // @@protoc_insertion_point(destructor:safex.txout)
  SharedDtor();
}

void txout::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void txout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const txout& txout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_txout_transactions_2eproto.base);
  return *internal_default_instance();
}


void txout::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.txout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_amount_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(token_amount_));
  _internal_metadata_.Clear();
}

const char* txout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 token_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          token_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safex.txout_target_v target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* txout::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.txout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // uint64 token_amount = 2;
  if (this->token_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_token_amount(), target);
  }

  // .safex.txout_target_v target = 3;
  if (this->has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.txout)
  return target;
}

size_t txout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.txout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safex.txout_target_v target = 3;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // uint64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // uint64 token_amount = 2;
  if (this->token_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_token_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void txout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.txout)
  GOOGLE_DCHECK_NE(&from, this);
  const txout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<txout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.txout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.txout)
    MergeFrom(*source);
  }
}

void txout::MergeFrom(const txout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.txout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    _internal_mutable_target()->::safex::txout_target_v::MergeFrom(from._internal_target());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.token_amount() != 0) {
    _internal_set_token_amount(from._internal_token_amount());
  }
}

void txout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.txout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void txout::CopyFrom(const txout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.txout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool txout::IsInitialized() const {
  return true;
}

void txout::InternalSwap(txout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(amount_, other->amount_);
  swap(token_amount_, other->token_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata txout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SigData::InitAsDefaultInstance() {
}
class SigData::_Internal {
 public:
};

SigData::SigData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.SigData)
}
SigData::SigData(const SigData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  r_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_r().empty()) {
    r_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c().empty()) {
    c_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c_);
  }
  // @@protoc_insertion_point(copy_constructor:safex.SigData)
}

void SigData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigData_transactions_2eproto.base);
  r_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SigData::~SigData() {
  // @@protoc_insertion_point(destructor:safex.SigData)
  SharedDtor();
}

void SigData::SharedDtor() {
  r_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SigData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigData& SigData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigData_transactions_2eproto.base);
  return *internal_default_instance();
}


void SigData::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.SigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  r_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SigData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_r(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_c(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.SigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes r = 1;
  if (this->r().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_r(), target);
  }

  // bytes c = 2;
  if (this->c().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.SigData)
  return target;
}

size_t SigData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.SigData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes r = 1;
  if (this->r().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_r());
  }

  // bytes c = 2;
  if (this->c().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_c());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.SigData)
  GOOGLE_DCHECK_NE(&from, this);
  const SigData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.SigData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.SigData)
    MergeFrom(*source);
  }
}

void SigData::MergeFrom(const SigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.SigData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.r().size() > 0) {

    r_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  if (from.c().size() > 0) {

    c_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c_);
  }
}

void SigData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.SigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigData::CopyFrom(const SigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.SigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigData::IsInitialized() const {
  return true;
}

void SigData::InternalSwap(SigData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  r_.Swap(&other->r_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  c_.Swap(&other->c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SigData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Signature::InitAsDefaultInstance() {
}
class Signature::_Internal {
 public:
};

Signature::Signature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.Signature)
}
Signature::Signature(const Signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      signature_(from.signature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:safex.Signature)
}

void Signature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signature_transactions_2eproto.base);
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:safex.Signature)
  SharedDtor();
}

void Signature::SharedDtor() {
}

void Signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signature& Signature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signature_transactions_2eproto.base);
  return *internal_default_instance();
}


void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.Clear();
  _internal_metadata_.Clear();
}

const char* Signature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .safex.SigData signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signature::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safex.SigData signature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_signature(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.Signature)
  return target;
}

size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.Signature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safex.SigData signature = 1;
  total_size += 1UL * this->_internal_signature_size();
  for (const auto& msg : this->signature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.Signature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signature_.MergeFrom(from.signature_);
}

void Signature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::InternalSwap(Signature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signature_.InternalSwap(&other->signature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
}
class Transaction::_Internal {
 public:
};

Transaction::Transaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vin_(from.vin_),
      vout_(from.vout_),
      signatures_(from.signatures_),
      output_indices_(from.output_indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra().empty()) {
    extra_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_pool_) -
    reinterpret_cast<char*>(&version_)) + sizeof(in_pool_));
  // @@protoc_insertion_point(copy_constructor:safex.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_transactions_2eproto.base);
  extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_pool_) -
      reinterpret_cast<char*>(&version_)) + sizeof(in_pool_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:safex.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  extra_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_transactions_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vin_.Clear();
  vout_.Clear();
  signatures_.Clear();
  output_indices_.Clear();
  extra_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_pool_) -
      reinterpret_cast<char*>(&version_)) + sizeof(in_pool_));
  _internal_metadata_.Clear();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 unlock_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unlock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_extra(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .safex.txin_v vin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vin(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .safex.txout vout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vout(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .safex.Signature signatures = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 block_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          block_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool double_spend_seen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          double_spend_seen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool in_pool = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          in_pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 output_indices = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_output_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_output_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tx_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_tx_hash(), ptr, ctx, "safex.Transaction.tx_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_version(), target);
  }

  // uint64 unlock_time = 2;
  if (this->unlock_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_unlock_time(), target);
  }

  // bytes extra = 3;
  if (this->extra().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_extra(), target);
  }

  // repeated .safex.txin_v vin = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vin_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_vin(i), target, stream);
  }

  // repeated .safex.txout vout = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vout_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_vout(i), target, stream);
  }

  // repeated .safex.Signature signatures = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signatures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_signatures(i), target, stream);
  }

  // uint64 block_height = 7;
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_block_height(), target);
  }

  // uint64 block_timestamp = 8;
  if (this->block_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_block_timestamp(), target);
  }

  // bool double_spend_seen = 9;
  if (this->double_spend_seen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_double_spend_seen(), target);
  }

  // bool in_pool = 10;
  if (this->in_pool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_in_pool(), target);
  }

  // repeated uint64 output_indices = 11;
  {
    int byte_size = _output_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          11, _internal_output_indices(), byte_size, target);
    }
  }

  // string tx_hash = 12;
  if (this->tx_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_hash().data(), static_cast<int>(this->_internal_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safex.Transaction.tx_hash");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_tx_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safex.txin_v vin = 4;
  total_size += 1UL * this->_internal_vin_size();
  for (const auto& msg : this->vin_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .safex.txout vout = 5;
  total_size += 1UL * this->_internal_vout_size();
  for (const auto& msg : this->vout_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .safex.Signature signatures = 6;
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 output_indices = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->output_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes extra = 3;
  if (this->extra().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra());
  }

  // string tx_hash = 12;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_hash());
  }

  // uint64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  // uint64 unlock_time = 2;
  if (this->unlock_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_unlock_time());
  }

  // uint64 block_height = 7;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_height());
  }

  // uint64 block_timestamp = 8;
  if (this->block_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_timestamp());
  }

  // bool double_spend_seen = 9;
  if (this->double_spend_seen() != 0) {
    total_size += 1 + 1;
  }

  // bool in_pool = 10;
  if (this->in_pool() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vin_.MergeFrom(from.vin_);
  vout_.MergeFrom(from.vout_);
  signatures_.MergeFrom(from.signatures_);
  output_indices_.MergeFrom(from.output_indices_);
  if (from.extra().size() > 0) {

    extra_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  if (from.tx_hash().size() > 0) {

    tx_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.unlock_time() != 0) {
    _internal_set_unlock_time(from._internal_unlock_time());
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  if (from.block_timestamp() != 0) {
    _internal_set_block_timestamp(from._internal_block_timestamp());
  }
  if (from.double_spend_seen() != 0) {
    _internal_set_double_spend_seen(from._internal_double_spend_seen());
  }
  if (from.in_pool() != 0) {
    _internal_set_in_pool(from._internal_in_pool());
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vin_.InternalSwap(&other->vin_);
  vout_.InternalSwap(&other->vout_);
  signatures_.InternalSwap(&other->signatures_);
  output_indices_.InternalSwap(&other->output_indices_);
  extra_.Swap(&other->extra_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(unlock_time_, other->unlock_time_);
  swap(block_height_, other->block_height_);
  swap(block_timestamp_, other->block_timestamp_);
  swap(double_spend_seen_, other->double_spend_seen_);
  swap(in_pool_, other->in_pool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transactions::InitAsDefaultInstance() {
}
class Transactions::_Internal {
 public:
};

Transactions::Transactions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safex.Transactions)
}
Transactions::Transactions(const Transactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tx_(from.tx_),
      missed_txs_(from.missed_txs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:safex.Transactions)
}

void Transactions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transactions_transactions_2eproto.base);
}

Transactions::~Transactions() {
  // @@protoc_insertion_point(destructor:safex.Transactions)
  SharedDtor();
}

void Transactions::SharedDtor() {
}

void Transactions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transactions& Transactions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transactions_transactions_2eproto.base);
  return *internal_default_instance();
}


void Transactions::Clear() {
// @@protoc_insertion_point(message_clear_start:safex.Transactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.Clear();
  missed_txs_.Clear();
  _internal_metadata_.Clear();
}

const char* Transactions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .safex.Transaction tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string missed_txs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_missed_txs(), ptr, ctx, "safex.Transactions.missed_txs");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transactions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safex.Transactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safex.Transaction tx = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_tx(i), target, stream);
  }

  // repeated string missed_txs = 2;
  for (int i = 0, n = this->_internal_missed_txs_size(); i < n; i++) {
    const auto& s = this->_internal_missed_txs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safex.Transactions.missed_txs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safex.Transactions)
  return target;
}

size_t Transactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safex.Transactions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safex.Transaction tx = 1;
  total_size += 1UL * this->_internal_tx_size();
  for (const auto& msg : this->tx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string missed_txs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(missed_txs_.size());
  for (int i = 0, n = missed_txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      missed_txs_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transactions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safex.Transactions)
  GOOGLE_DCHECK_NE(&from, this);
  const Transactions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transactions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safex.Transactions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safex.Transactions)
    MergeFrom(*source);
  }
}

void Transactions::MergeFrom(const Transactions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safex.Transactions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_.MergeFrom(from.tx_);
  missed_txs_.MergeFrom(from.missed_txs_);
}

void Transactions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safex.Transactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transactions::CopyFrom(const Transactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safex.Transactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transactions::IsInitialized() const {
  return true;
}

void Transactions::InternalSwap(Transactions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tx_.InternalSwap(&other->tx_);
  missed_txs_.InternalSwap(&other->missed_txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transactions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safex::txin_gen* Arena::CreateMaybeMessage< ::safex::txin_gen >(Arena* arena) {
  return Arena::CreateInternal< ::safex::txin_gen >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::txin_to_key* Arena::CreateMaybeMessage< ::safex::txin_to_key >(Arena* arena) {
  return Arena::CreateInternal< ::safex::txin_to_key >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::txin_token_to_key* Arena::CreateMaybeMessage< ::safex::txin_token_to_key >(Arena* arena) {
  return Arena::CreateInternal< ::safex::txin_token_to_key >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::txin_token_migration* Arena::CreateMaybeMessage< ::safex::txin_token_migration >(Arena* arena) {
  return Arena::CreateInternal< ::safex::txin_token_migration >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::txin_v* Arena::CreateMaybeMessage< ::safex::txin_v >(Arena* arena) {
  return Arena::CreateInternal< ::safex::txin_v >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::txout_to_key* Arena::CreateMaybeMessage< ::safex::txout_to_key >(Arena* arena) {
  return Arena::CreateInternal< ::safex::txout_to_key >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::txout_token_to_key* Arena::CreateMaybeMessage< ::safex::txout_token_to_key >(Arena* arena) {
  return Arena::CreateInternal< ::safex::txout_token_to_key >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::txout_target_v* Arena::CreateMaybeMessage< ::safex::txout_target_v >(Arena* arena) {
  return Arena::CreateInternal< ::safex::txout_target_v >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::txout* Arena::CreateMaybeMessage< ::safex::txout >(Arena* arena) {
  return Arena::CreateInternal< ::safex::txout >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::SigData* Arena::CreateMaybeMessage< ::safex::SigData >(Arena* arena) {
  return Arena::CreateInternal< ::safex::SigData >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::Signature* Arena::CreateMaybeMessage< ::safex::Signature >(Arena* arena) {
  return Arena::CreateInternal< ::safex::Signature >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::Transaction* Arena::CreateMaybeMessage< ::safex::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::safex::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::safex::Transactions* Arena::CreateMaybeMessage< ::safex::Transactions >(Arena* arena) {
  return Arena::CreateInternal< ::safex::Transactions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
