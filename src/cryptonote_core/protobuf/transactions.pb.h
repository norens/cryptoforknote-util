// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transactions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transactions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transactions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transactions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transactions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transactions_2eproto;
namespace safex {
class SigData;
class SigDataDefaultTypeInternal;
extern SigDataDefaultTypeInternal _SigData_default_instance_;
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class Transactions;
class TransactionsDefaultTypeInternal;
extern TransactionsDefaultTypeInternal _Transactions_default_instance_;
class txin_gen;
class txin_genDefaultTypeInternal;
extern txin_genDefaultTypeInternal _txin_gen_default_instance_;
class txin_to_key;
class txin_to_keyDefaultTypeInternal;
extern txin_to_keyDefaultTypeInternal _txin_to_key_default_instance_;
class txin_token_migration;
class txin_token_migrationDefaultTypeInternal;
extern txin_token_migrationDefaultTypeInternal _txin_token_migration_default_instance_;
class txin_token_to_key;
class txin_token_to_keyDefaultTypeInternal;
extern txin_token_to_keyDefaultTypeInternal _txin_token_to_key_default_instance_;
class txin_v;
class txin_vDefaultTypeInternal;
extern txin_vDefaultTypeInternal _txin_v_default_instance_;
class txout;
class txoutDefaultTypeInternal;
extern txoutDefaultTypeInternal _txout_default_instance_;
class txout_target_v;
class txout_target_vDefaultTypeInternal;
extern txout_target_vDefaultTypeInternal _txout_target_v_default_instance_;
class txout_to_key;
class txout_to_keyDefaultTypeInternal;
extern txout_to_keyDefaultTypeInternal _txout_to_key_default_instance_;
class txout_token_to_key;
class txout_token_to_keyDefaultTypeInternal;
extern txout_token_to_keyDefaultTypeInternal _txout_token_to_key_default_instance_;
}  // namespace safex
PROTOBUF_NAMESPACE_OPEN
template<> ::safex::SigData* Arena::CreateMaybeMessage<::safex::SigData>(Arena*);
template<> ::safex::Signature* Arena::CreateMaybeMessage<::safex::Signature>(Arena*);
template<> ::safex::Transaction* Arena::CreateMaybeMessage<::safex::Transaction>(Arena*);
template<> ::safex::Transactions* Arena::CreateMaybeMessage<::safex::Transactions>(Arena*);
template<> ::safex::txin_gen* Arena::CreateMaybeMessage<::safex::txin_gen>(Arena*);
template<> ::safex::txin_to_key* Arena::CreateMaybeMessage<::safex::txin_to_key>(Arena*);
template<> ::safex::txin_token_migration* Arena::CreateMaybeMessage<::safex::txin_token_migration>(Arena*);
template<> ::safex::txin_token_to_key* Arena::CreateMaybeMessage<::safex::txin_token_to_key>(Arena*);
template<> ::safex::txin_v* Arena::CreateMaybeMessage<::safex::txin_v>(Arena*);
template<> ::safex::txout* Arena::CreateMaybeMessage<::safex::txout>(Arena*);
template<> ::safex::txout_target_v* Arena::CreateMaybeMessage<::safex::txout_target_v>(Arena*);
template<> ::safex::txout_to_key* Arena::CreateMaybeMessage<::safex::txout_to_key>(Arena*);
template<> ::safex::txout_token_to_key* Arena::CreateMaybeMessage<::safex::txout_token_to_key>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safex {

// ===================================================================

class txin_gen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.txin_gen) */ {
 public:
  txin_gen();
  virtual ~txin_gen();

  txin_gen(const txin_gen& from);
  txin_gen(txin_gen&& from) noexcept
    : txin_gen() {
    *this = ::std::move(from);
  }

  inline txin_gen& operator=(const txin_gen& from) {
    CopyFrom(from);
    return *this;
  }
  inline txin_gen& operator=(txin_gen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const txin_gen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const txin_gen* internal_default_instance() {
    return reinterpret_cast<const txin_gen*>(
               &_txin_gen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(txin_gen& a, txin_gen& b) {
    a.Swap(&b);
  }
  inline void Swap(txin_gen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline txin_gen* New() const final {
    return CreateMaybeMessage<txin_gen>(nullptr);
  }

  txin_gen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<txin_gen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const txin_gen& from);
  void MergeFrom(const txin_gen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(txin_gen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.txin_gen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // uint64 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:safex.txin_gen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class txin_to_key :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.txin_to_key) */ {
 public:
  txin_to_key();
  virtual ~txin_to_key();

  txin_to_key(const txin_to_key& from);
  txin_to_key(txin_to_key&& from) noexcept
    : txin_to_key() {
    *this = ::std::move(from);
  }

  inline txin_to_key& operator=(const txin_to_key& from) {
    CopyFrom(from);
    return *this;
  }
  inline txin_to_key& operator=(txin_to_key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const txin_to_key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const txin_to_key* internal_default_instance() {
    return reinterpret_cast<const txin_to_key*>(
               &_txin_to_key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(txin_to_key& a, txin_to_key& b) {
    a.Swap(&b);
  }
  inline void Swap(txin_to_key* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline txin_to_key* New() const final {
    return CreateMaybeMessage<txin_to_key>(nullptr);
  }

  txin_to_key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<txin_to_key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const txin_to_key& from);
  void MergeFrom(const txin_to_key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(txin_to_key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.txin_to_key";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyOffsetsFieldNumber = 3,
    kKImageFieldNumber = 2,
    kAmountFieldNumber = 1,
  };
  // repeated uint64 key_offsets = 3;
  int key_offsets_size() const;
  private:
  int _internal_key_offsets_size() const;
  public:
  void clear_key_offsets();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_key_offsets() const;
  void _internal_add_key_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_key_offsets();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 key_offsets(int index) const;
  void set_key_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_key_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      key_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_key_offsets();

  // bytes k_image = 2;
  void clear_k_image();
  const std::string& k_image() const;
  void set_k_image(const std::string& value);
  void set_k_image(std::string&& value);
  void set_k_image(const char* value);
  void set_k_image(const void* value, size_t size);
  std::string* mutable_k_image();
  std::string* release_k_image();
  void set_allocated_k_image(std::string* k_image);
  private:
  const std::string& _internal_k_image() const;
  void _internal_set_k_image(const std::string& value);
  std::string* _internal_mutable_k_image();
  public:

  // uint64 amount = 1;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:safex.txin_to_key)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > key_offsets_;
  mutable std::atomic<int> _key_offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_image_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class txin_token_to_key :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.txin_token_to_key) */ {
 public:
  txin_token_to_key();
  virtual ~txin_token_to_key();

  txin_token_to_key(const txin_token_to_key& from);
  txin_token_to_key(txin_token_to_key&& from) noexcept
    : txin_token_to_key() {
    *this = ::std::move(from);
  }

  inline txin_token_to_key& operator=(const txin_token_to_key& from) {
    CopyFrom(from);
    return *this;
  }
  inline txin_token_to_key& operator=(txin_token_to_key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const txin_token_to_key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const txin_token_to_key* internal_default_instance() {
    return reinterpret_cast<const txin_token_to_key*>(
               &_txin_token_to_key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(txin_token_to_key& a, txin_token_to_key& b) {
    a.Swap(&b);
  }
  inline void Swap(txin_token_to_key* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline txin_token_to_key* New() const final {
    return CreateMaybeMessage<txin_token_to_key>(nullptr);
  }

  txin_token_to_key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<txin_token_to_key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const txin_token_to_key& from);
  void MergeFrom(const txin_token_to_key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(txin_token_to_key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.txin_token_to_key";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyOffsetsFieldNumber = 3,
    kKImageFieldNumber = 2,
    kTokenAmountFieldNumber = 1,
  };
  // repeated uint64 key_offsets = 3;
  int key_offsets_size() const;
  private:
  int _internal_key_offsets_size() const;
  public:
  void clear_key_offsets();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_key_offsets() const;
  void _internal_add_key_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_key_offsets();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 key_offsets(int index) const;
  void set_key_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_key_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      key_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_key_offsets();

  // bytes k_image = 2;
  void clear_k_image();
  const std::string& k_image() const;
  void set_k_image(const std::string& value);
  void set_k_image(std::string&& value);
  void set_k_image(const char* value);
  void set_k_image(const void* value, size_t size);
  std::string* mutable_k_image();
  std::string* release_k_image();
  void set_allocated_k_image(std::string* k_image);
  private:
  const std::string& _internal_k_image() const;
  void _internal_set_k_image(const std::string& value);
  std::string* _internal_mutable_k_image();
  public:

  // uint64 token_amount = 1;
  void clear_token_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 token_amount() const;
  void set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_token_amount() const;
  void _internal_set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:safex.txin_token_to_key)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > key_offsets_;
  mutable std::atomic<int> _key_offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_image_;
  ::PROTOBUF_NAMESPACE_ID::uint64 token_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class txin_token_migration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.txin_token_migration) */ {
 public:
  txin_token_migration();
  virtual ~txin_token_migration();

  txin_token_migration(const txin_token_migration& from);
  txin_token_migration(txin_token_migration&& from) noexcept
    : txin_token_migration() {
    *this = ::std::move(from);
  }

  inline txin_token_migration& operator=(const txin_token_migration& from) {
    CopyFrom(from);
    return *this;
  }
  inline txin_token_migration& operator=(txin_token_migration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const txin_token_migration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const txin_token_migration* internal_default_instance() {
    return reinterpret_cast<const txin_token_migration*>(
               &_txin_token_migration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(txin_token_migration& a, txin_token_migration& b) {
    a.Swap(&b);
  }
  inline void Swap(txin_token_migration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline txin_token_migration* New() const final {
    return CreateMaybeMessage<txin_token_migration>(nullptr);
  }

  txin_token_migration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<txin_token_migration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const txin_token_migration& from);
  void MergeFrom(const txin_token_migration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(txin_token_migration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.txin_token_migration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitcoinBurnTransactionFieldNumber = 2,
    kKImageFieldNumber = 3,
    kTokenAmountFieldNumber = 1,
  };
  // string bitcoin_burn_transaction = 2;
  void clear_bitcoin_burn_transaction();
  const std::string& bitcoin_burn_transaction() const;
  void set_bitcoin_burn_transaction(const std::string& value);
  void set_bitcoin_burn_transaction(std::string&& value);
  void set_bitcoin_burn_transaction(const char* value);
  void set_bitcoin_burn_transaction(const char* value, size_t size);
  std::string* mutable_bitcoin_burn_transaction();
  std::string* release_bitcoin_burn_transaction();
  void set_allocated_bitcoin_burn_transaction(std::string* bitcoin_burn_transaction);
  private:
  const std::string& _internal_bitcoin_burn_transaction() const;
  void _internal_set_bitcoin_burn_transaction(const std::string& value);
  std::string* _internal_mutable_bitcoin_burn_transaction();
  public:

  // bytes k_image = 3;
  void clear_k_image();
  const std::string& k_image() const;
  void set_k_image(const std::string& value);
  void set_k_image(std::string&& value);
  void set_k_image(const char* value);
  void set_k_image(const void* value, size_t size);
  std::string* mutable_k_image();
  std::string* release_k_image();
  void set_allocated_k_image(std::string* k_image);
  private:
  const std::string& _internal_k_image() const;
  void _internal_set_k_image(const std::string& value);
  std::string* _internal_mutable_k_image();
  public:

  // uint64 token_amount = 1;
  void clear_token_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 token_amount() const;
  void set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_token_amount() const;
  void _internal_set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:safex.txin_token_migration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bitcoin_burn_transaction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_image_;
  ::PROTOBUF_NAMESPACE_ID::uint64 token_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class txin_v :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.txin_v) */ {
 public:
  txin_v();
  virtual ~txin_v();

  txin_v(const txin_v& from);
  txin_v(txin_v&& from) noexcept
    : txin_v() {
    *this = ::std::move(from);
  }

  inline txin_v& operator=(const txin_v& from) {
    CopyFrom(from);
    return *this;
  }
  inline txin_v& operator=(txin_v&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const txin_v& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const txin_v* internal_default_instance() {
    return reinterpret_cast<const txin_v*>(
               &_txin_v_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(txin_v& a, txin_v& b) {
    a.Swap(&b);
  }
  inline void Swap(txin_v* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline txin_v* New() const final {
    return CreateMaybeMessage<txin_v>(nullptr);
  }

  txin_v* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<txin_v>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const txin_v& from);
  void MergeFrom(const txin_v& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(txin_v* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.txin_v";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxinGenFieldNumber = 1,
    kTxinToKeyFieldNumber = 2,
    kTxinTokenToKeyFieldNumber = 3,
    kTxinTokenMigrationFieldNumber = 4,
  };
  // .safex.txin_gen txin_gen = 1;
  bool has_txin_gen() const;
  private:
  bool _internal_has_txin_gen() const;
  public:
  void clear_txin_gen();
  const ::safex::txin_gen& txin_gen() const;
  ::safex::txin_gen* release_txin_gen();
  ::safex::txin_gen* mutable_txin_gen();
  void set_allocated_txin_gen(::safex::txin_gen* txin_gen);
  private:
  const ::safex::txin_gen& _internal_txin_gen() const;
  ::safex::txin_gen* _internal_mutable_txin_gen();
  public:

  // .safex.txin_to_key txin_to_key = 2;
  bool has_txin_to_key() const;
  private:
  bool _internal_has_txin_to_key() const;
  public:
  void clear_txin_to_key();
  const ::safex::txin_to_key& txin_to_key() const;
  ::safex::txin_to_key* release_txin_to_key();
  ::safex::txin_to_key* mutable_txin_to_key();
  void set_allocated_txin_to_key(::safex::txin_to_key* txin_to_key);
  private:
  const ::safex::txin_to_key& _internal_txin_to_key() const;
  ::safex::txin_to_key* _internal_mutable_txin_to_key();
  public:

  // .safex.txin_token_to_key txin_token_to_key = 3;
  bool has_txin_token_to_key() const;
  private:
  bool _internal_has_txin_token_to_key() const;
  public:
  void clear_txin_token_to_key();
  const ::safex::txin_token_to_key& txin_token_to_key() const;
  ::safex::txin_token_to_key* release_txin_token_to_key();
  ::safex::txin_token_to_key* mutable_txin_token_to_key();
  void set_allocated_txin_token_to_key(::safex::txin_token_to_key* txin_token_to_key);
  private:
  const ::safex::txin_token_to_key& _internal_txin_token_to_key() const;
  ::safex::txin_token_to_key* _internal_mutable_txin_token_to_key();
  public:

  // .safex.txin_token_migration txin_token_migration = 4;
  bool has_txin_token_migration() const;
  private:
  bool _internal_has_txin_token_migration() const;
  public:
  void clear_txin_token_migration();
  const ::safex::txin_token_migration& txin_token_migration() const;
  ::safex::txin_token_migration* release_txin_token_migration();
  ::safex::txin_token_migration* mutable_txin_token_migration();
  void set_allocated_txin_token_migration(::safex::txin_token_migration* txin_token_migration);
  private:
  const ::safex::txin_token_migration& _internal_txin_token_migration() const;
  ::safex::txin_token_migration* _internal_mutable_txin_token_migration();
  public:

  // @@protoc_insertion_point(class_scope:safex.txin_v)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::safex::txin_gen* txin_gen_;
  ::safex::txin_to_key* txin_to_key_;
  ::safex::txin_token_to_key* txin_token_to_key_;
  ::safex::txin_token_migration* txin_token_migration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class txout_to_key :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.txout_to_key) */ {
 public:
  txout_to_key();
  virtual ~txout_to_key();

  txout_to_key(const txout_to_key& from);
  txout_to_key(txout_to_key&& from) noexcept
    : txout_to_key() {
    *this = ::std::move(from);
  }

  inline txout_to_key& operator=(const txout_to_key& from) {
    CopyFrom(from);
    return *this;
  }
  inline txout_to_key& operator=(txout_to_key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const txout_to_key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const txout_to_key* internal_default_instance() {
    return reinterpret_cast<const txout_to_key*>(
               &_txout_to_key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(txout_to_key& a, txout_to_key& b) {
    a.Swap(&b);
  }
  inline void Swap(txout_to_key* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline txout_to_key* New() const final {
    return CreateMaybeMessage<txout_to_key>(nullptr);
  }

  txout_to_key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<txout_to_key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const txout_to_key& from);
  void MergeFrom(const txout_to_key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(txout_to_key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.txout_to_key";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:safex.txout_to_key)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class txout_token_to_key :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.txout_token_to_key) */ {
 public:
  txout_token_to_key();
  virtual ~txout_token_to_key();

  txout_token_to_key(const txout_token_to_key& from);
  txout_token_to_key(txout_token_to_key&& from) noexcept
    : txout_token_to_key() {
    *this = ::std::move(from);
  }

  inline txout_token_to_key& operator=(const txout_token_to_key& from) {
    CopyFrom(from);
    return *this;
  }
  inline txout_token_to_key& operator=(txout_token_to_key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const txout_token_to_key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const txout_token_to_key* internal_default_instance() {
    return reinterpret_cast<const txout_token_to_key*>(
               &_txout_token_to_key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(txout_token_to_key& a, txout_token_to_key& b) {
    a.Swap(&b);
  }
  inline void Swap(txout_token_to_key* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline txout_token_to_key* New() const final {
    return CreateMaybeMessage<txout_token_to_key>(nullptr);
  }

  txout_token_to_key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<txout_token_to_key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const txout_token_to_key& from);
  void MergeFrom(const txout_token_to_key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(txout_token_to_key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.txout_token_to_key";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:safex.txout_token_to_key)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class txout_target_v :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.txout_target_v) */ {
 public:
  txout_target_v();
  virtual ~txout_target_v();

  txout_target_v(const txout_target_v& from);
  txout_target_v(txout_target_v&& from) noexcept
    : txout_target_v() {
    *this = ::std::move(from);
  }

  inline txout_target_v& operator=(const txout_target_v& from) {
    CopyFrom(from);
    return *this;
  }
  inline txout_target_v& operator=(txout_target_v&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const txout_target_v& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const txout_target_v* internal_default_instance() {
    return reinterpret_cast<const txout_target_v*>(
               &_txout_target_v_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(txout_target_v& a, txout_target_v& b) {
    a.Swap(&b);
  }
  inline void Swap(txout_target_v* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline txout_target_v* New() const final {
    return CreateMaybeMessage<txout_target_v>(nullptr);
  }

  txout_target_v* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<txout_target_v>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const txout_target_v& from);
  void MergeFrom(const txout_target_v& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(txout_target_v* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.txout_target_v";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxoutToKeyFieldNumber = 1,
    kTxoutTokenToKeyFieldNumber = 2,
  };
  // .safex.txout_to_key txout_to_key = 1;
  bool has_txout_to_key() const;
  private:
  bool _internal_has_txout_to_key() const;
  public:
  void clear_txout_to_key();
  const ::safex::txout_to_key& txout_to_key() const;
  ::safex::txout_to_key* release_txout_to_key();
  ::safex::txout_to_key* mutable_txout_to_key();
  void set_allocated_txout_to_key(::safex::txout_to_key* txout_to_key);
  private:
  const ::safex::txout_to_key& _internal_txout_to_key() const;
  ::safex::txout_to_key* _internal_mutable_txout_to_key();
  public:

  // .safex.txout_token_to_key txout_token_to_key = 2;
  bool has_txout_token_to_key() const;
  private:
  bool _internal_has_txout_token_to_key() const;
  public:
  void clear_txout_token_to_key();
  const ::safex::txout_token_to_key& txout_token_to_key() const;
  ::safex::txout_token_to_key* release_txout_token_to_key();
  ::safex::txout_token_to_key* mutable_txout_token_to_key();
  void set_allocated_txout_token_to_key(::safex::txout_token_to_key* txout_token_to_key);
  private:
  const ::safex::txout_token_to_key& _internal_txout_token_to_key() const;
  ::safex::txout_token_to_key* _internal_mutable_txout_token_to_key();
  public:

  // @@protoc_insertion_point(class_scope:safex.txout_target_v)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::safex::txout_to_key* txout_to_key_;
  ::safex::txout_token_to_key* txout_token_to_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class txout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.txout) */ {
 public:
  txout();
  virtual ~txout();

  txout(const txout& from);
  txout(txout&& from) noexcept
    : txout() {
    *this = ::std::move(from);
  }

  inline txout& operator=(const txout& from) {
    CopyFrom(from);
    return *this;
  }
  inline txout& operator=(txout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const txout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const txout* internal_default_instance() {
    return reinterpret_cast<const txout*>(
               &_txout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(txout& a, txout& b) {
    a.Swap(&b);
  }
  inline void Swap(txout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline txout* New() const final {
    return CreateMaybeMessage<txout>(nullptr);
  }

  txout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<txout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const txout& from);
  void MergeFrom(const txout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(txout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.txout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 3,
    kAmountFieldNumber = 1,
    kTokenAmountFieldNumber = 2,
  };
  // .safex.txout_target_v target = 3;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::safex::txout_target_v& target() const;
  ::safex::txout_target_v* release_target();
  ::safex::txout_target_v* mutable_target();
  void set_allocated_target(::safex::txout_target_v* target);
  private:
  const ::safex::txout_target_v& _internal_target() const;
  ::safex::txout_target_v* _internal_mutable_target();
  public:

  // uint64 amount = 1;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 token_amount = 2;
  void clear_token_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 token_amount() const;
  void set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_token_amount() const;
  void _internal_set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:safex.txout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::safex::txout_target_v* target_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 token_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class SigData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.SigData) */ {
 public:
  SigData();
  virtual ~SigData();

  SigData(const SigData& from);
  SigData(SigData&& from) noexcept
    : SigData() {
    *this = ::std::move(from);
  }

  inline SigData& operator=(const SigData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigData& operator=(SigData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SigData* internal_default_instance() {
    return reinterpret_cast<const SigData*>(
               &_SigData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SigData& a, SigData& b) {
    a.Swap(&b);
  }
  inline void Swap(SigData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigData* New() const final {
    return CreateMaybeMessage<SigData>(nullptr);
  }

  SigData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigData& from);
  void MergeFrom(const SigData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.SigData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kCFieldNumber = 2,
  };
  // bytes r = 1;
  void clear_r();
  const std::string& r() const;
  void set_r(const std::string& value);
  void set_r(std::string&& value);
  void set_r(const char* value);
  void set_r(const void* value, size_t size);
  std::string* mutable_r();
  std::string* release_r();
  void set_allocated_r(std::string* r);
  private:
  const std::string& _internal_r() const;
  void _internal_set_r(const std::string& value);
  std::string* _internal_mutable_r();
  public:

  // bytes c = 2;
  void clear_c();
  const std::string& c() const;
  void set_c(const std::string& value);
  void set_c(std::string&& value);
  void set_c(const char* value);
  void set_c(const void* value, size_t size);
  std::string* mutable_c();
  std::string* release_c();
  void set_allocated_c(std::string* c);
  private:
  const std::string& _internal_c() const;
  void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();
  public:

  // @@protoc_insertion_point(class_scope:safex.SigData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class Signature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.Signature) */ {
 public:
  Signature();
  virtual ~Signature();

  Signature(const Signature& from);
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const final {
    return CreateMaybeMessage<Signature>(nullptr);
  }

  Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.Signature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
  };
  // repeated .safex.SigData signature = 1;
  int signature_size() const;
  private:
  int _internal_signature_size() const;
  public:
  void clear_signature();
  ::safex::SigData* mutable_signature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::SigData >*
      mutable_signature();
  private:
  const ::safex::SigData& _internal_signature(int index) const;
  ::safex::SigData* _internal_add_signature();
  public:
  const ::safex::SigData& signature(int index) const;
  ::safex::SigData* add_signature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::SigData >&
      signature() const;

  // @@protoc_insertion_point(class_scope:safex.Signature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::SigData > signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class Transaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.Transaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVinFieldNumber = 4,
    kVoutFieldNumber = 5,
    kSignaturesFieldNumber = 6,
    kOutputIndicesFieldNumber = 11,
    kExtraFieldNumber = 3,
    kTxHashFieldNumber = 12,
    kVersionFieldNumber = 1,
    kUnlockTimeFieldNumber = 2,
    kBlockHeightFieldNumber = 7,
    kBlockTimestampFieldNumber = 8,
    kDoubleSpendSeenFieldNumber = 9,
    kInPoolFieldNumber = 10,
  };
  // repeated .safex.txin_v vin = 4;
  int vin_size() const;
  private:
  int _internal_vin_size() const;
  public:
  void clear_vin();
  ::safex::txin_v* mutable_vin(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::txin_v >*
      mutable_vin();
  private:
  const ::safex::txin_v& _internal_vin(int index) const;
  ::safex::txin_v* _internal_add_vin();
  public:
  const ::safex::txin_v& vin(int index) const;
  ::safex::txin_v* add_vin();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::txin_v >&
      vin() const;

  // repeated .safex.txout vout = 5;
  int vout_size() const;
  private:
  int _internal_vout_size() const;
  public:
  void clear_vout();
  ::safex::txout* mutable_vout(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::txout >*
      mutable_vout();
  private:
  const ::safex::txout& _internal_vout(int index) const;
  ::safex::txout* _internal_add_vout();
  public:
  const ::safex::txout& vout(int index) const;
  ::safex::txout* add_vout();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::txout >&
      vout() const;

  // repeated .safex.Signature signatures = 6;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  ::safex::Signature* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Signature >*
      mutable_signatures();
  private:
  const ::safex::Signature& _internal_signatures(int index) const;
  ::safex::Signature* _internal_add_signatures();
  public:
  const ::safex::Signature& signatures(int index) const;
  ::safex::Signature* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Signature >&
      signatures() const;

  // repeated uint64 output_indices = 11;
  int output_indices_size() const;
  private:
  int _internal_output_indices_size() const;
  public:
  void clear_output_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_output_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_output_indices() const;
  void _internal_add_output_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_output_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 output_indices(int index) const;
  void set_output_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_output_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      output_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_output_indices();

  // bytes extra = 3;
  void clear_extra();
  const std::string& extra() const;
  void set_extra(const std::string& value);
  void set_extra(std::string&& value);
  void set_extra(const char* value);
  void set_extra(const void* value, size_t size);
  std::string* mutable_extra();
  std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // string tx_hash = 12;
  void clear_tx_hash();
  const std::string& tx_hash() const;
  void set_tx_hash(const std::string& value);
  void set_tx_hash(std::string&& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  std::string* mutable_tx_hash();
  std::string* release_tx_hash();
  void set_allocated_tx_hash(std::string* tx_hash);
  private:
  const std::string& _internal_tx_hash() const;
  void _internal_set_tx_hash(const std::string& value);
  std::string* _internal_mutable_tx_hash();
  public:

  // uint64 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 unlock_time = 2;
  void clear_unlock_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 unlock_time() const;
  void set_unlock_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_unlock_time() const;
  void _internal_set_unlock_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block_height = 7;
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block_timestamp = 8;
  void clear_block_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_timestamp() const;
  void set_block_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_timestamp() const;
  void _internal_set_block_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool double_spend_seen = 9;
  void clear_double_spend_seen();
  bool double_spend_seen() const;
  void set_double_spend_seen(bool value);
  private:
  bool _internal_double_spend_seen() const;
  void _internal_set_double_spend_seen(bool value);
  public:

  // bool in_pool = 10;
  void clear_in_pool();
  bool in_pool() const;
  void set_in_pool(bool value);
  private:
  bool _internal_in_pool() const;
  void _internal_set_in_pool(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safex.Transaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::txin_v > vin_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::txout > vout_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Signature > signatures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > output_indices_;
  mutable std::atomic<int> _output_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unlock_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_timestamp_;
  bool double_spend_seen_;
  bool in_pool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// -------------------------------------------------------------------

class Transactions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safex.Transactions) */ {
 public:
  Transactions();
  virtual ~Transactions();

  Transactions(const Transactions& from);
  Transactions(Transactions&& from) noexcept
    : Transactions() {
    *this = ::std::move(from);
  }

  inline Transactions& operator=(const Transactions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transactions& operator=(Transactions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transactions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transactions* internal_default_instance() {
    return reinterpret_cast<const Transactions*>(
               &_Transactions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Transactions& a, Transactions& b) {
    a.Swap(&b);
  }
  inline void Swap(Transactions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transactions* New() const final {
    return CreateMaybeMessage<Transactions>(nullptr);
  }

  Transactions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transactions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transactions& from);
  void MergeFrom(const Transactions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transactions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safex.Transactions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transactions_2eproto);
    return ::descriptor_table_transactions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
    kMissedTxsFieldNumber = 2,
  };
  // repeated .safex.Transaction tx = 1;
  int tx_size() const;
  private:
  int _internal_tx_size() const;
  public:
  void clear_tx();
  ::safex::Transaction* mutable_tx(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Transaction >*
      mutable_tx();
  private:
  const ::safex::Transaction& _internal_tx(int index) const;
  ::safex::Transaction* _internal_add_tx();
  public:
  const ::safex::Transaction& tx(int index) const;
  ::safex::Transaction* add_tx();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Transaction >&
      tx() const;

  // repeated string missed_txs = 2;
  int missed_txs_size() const;
  private:
  int _internal_missed_txs_size() const;
  public:
  void clear_missed_txs();
  const std::string& missed_txs(int index) const;
  std::string* mutable_missed_txs(int index);
  void set_missed_txs(int index, const std::string& value);
  void set_missed_txs(int index, std::string&& value);
  void set_missed_txs(int index, const char* value);
  void set_missed_txs(int index, const char* value, size_t size);
  std::string* add_missed_txs();
  void add_missed_txs(const std::string& value);
  void add_missed_txs(std::string&& value);
  void add_missed_txs(const char* value);
  void add_missed_txs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& missed_txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_missed_txs();
  private:
  const std::string& _internal_missed_txs(int index) const;
  std::string* _internal_add_missed_txs();
  public:

  // @@protoc_insertion_point(class_scope:safex.Transactions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Transaction > tx_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> missed_txs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transactions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// txin_gen

// uint64 height = 1;
inline void txin_gen::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txin_gen::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txin_gen::height() const {
  // @@protoc_insertion_point(field_get:safex.txin_gen.height)
  return _internal_height();
}
inline void txin_gen::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void txin_gen::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:safex.txin_gen.height)
}

// -------------------------------------------------------------------

// txin_to_key

// uint64 amount = 1;
inline void txin_to_key::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txin_to_key::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txin_to_key::amount() const {
  // @@protoc_insertion_point(field_get:safex.txin_to_key.amount)
  return _internal_amount();
}
inline void txin_to_key::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void txin_to_key::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:safex.txin_to_key.amount)
}

// bytes k_image = 2;
inline void txin_to_key::clear_k_image() {
  k_image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& txin_to_key::k_image() const {
  // @@protoc_insertion_point(field_get:safex.txin_to_key.k_image)
  return _internal_k_image();
}
inline void txin_to_key::set_k_image(const std::string& value) {
  _internal_set_k_image(value);
  // @@protoc_insertion_point(field_set:safex.txin_to_key.k_image)
}
inline std::string* txin_to_key::mutable_k_image() {
  // @@protoc_insertion_point(field_mutable:safex.txin_to_key.k_image)
  return _internal_mutable_k_image();
}
inline const std::string& txin_to_key::_internal_k_image() const {
  return k_image_.GetNoArena();
}
inline void txin_to_key::_internal_set_k_image(const std::string& value) {
  
  k_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void txin_to_key::set_k_image(std::string&& value) {
  
  k_image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.txin_to_key.k_image)
}
inline void txin_to_key::set_k_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txin_to_key.k_image)
}
inline void txin_to_key::set_k_image(const void* value, size_t size) {
  
  k_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txin_to_key.k_image)
}
inline std::string* txin_to_key::_internal_mutable_k_image() {
  
  return k_image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* txin_to_key::release_k_image() {
  // @@protoc_insertion_point(field_release:safex.txin_to_key.k_image)
  
  return k_image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void txin_to_key::set_allocated_k_image(std::string* k_image) {
  if (k_image != nullptr) {
    
  } else {
    
  }
  k_image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k_image);
  // @@protoc_insertion_point(field_set_allocated:safex.txin_to_key.k_image)
}

// repeated uint64 key_offsets = 3;
inline int txin_to_key::_internal_key_offsets_size() const {
  return key_offsets_.size();
}
inline int txin_to_key::key_offsets_size() const {
  return _internal_key_offsets_size();
}
inline void txin_to_key::clear_key_offsets() {
  key_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txin_to_key::_internal_key_offsets(int index) const {
  return key_offsets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txin_to_key::key_offsets(int index) const {
  // @@protoc_insertion_point(field_get:safex.txin_to_key.key_offsets)
  return _internal_key_offsets(index);
}
inline void txin_to_key::set_key_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  key_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:safex.txin_to_key.key_offsets)
}
inline void txin_to_key::_internal_add_key_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  key_offsets_.Add(value);
}
inline void txin_to_key::add_key_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_key_offsets(value);
  // @@protoc_insertion_point(field_add:safex.txin_to_key.key_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
txin_to_key::_internal_key_offsets() const {
  return key_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
txin_to_key::key_offsets() const {
  // @@protoc_insertion_point(field_list:safex.txin_to_key.key_offsets)
  return _internal_key_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
txin_to_key::_internal_mutable_key_offsets() {
  return &key_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
txin_to_key::mutable_key_offsets() {
  // @@protoc_insertion_point(field_mutable_list:safex.txin_to_key.key_offsets)
  return _internal_mutable_key_offsets();
}

// -------------------------------------------------------------------

// txin_token_to_key

// uint64 token_amount = 1;
inline void txin_token_to_key::clear_token_amount() {
  token_amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txin_token_to_key::_internal_token_amount() const {
  return token_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txin_token_to_key::token_amount() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_to_key.token_amount)
  return _internal_token_amount();
}
inline void txin_token_to_key::_internal_set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  token_amount_ = value;
}
inline void txin_token_to_key::set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_token_amount(value);
  // @@protoc_insertion_point(field_set:safex.txin_token_to_key.token_amount)
}

// bytes k_image = 2;
inline void txin_token_to_key::clear_k_image() {
  k_image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& txin_token_to_key::k_image() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_to_key.k_image)
  return _internal_k_image();
}
inline void txin_token_to_key::set_k_image(const std::string& value) {
  _internal_set_k_image(value);
  // @@protoc_insertion_point(field_set:safex.txin_token_to_key.k_image)
}
inline std::string* txin_token_to_key::mutable_k_image() {
  // @@protoc_insertion_point(field_mutable:safex.txin_token_to_key.k_image)
  return _internal_mutable_k_image();
}
inline const std::string& txin_token_to_key::_internal_k_image() const {
  return k_image_.GetNoArena();
}
inline void txin_token_to_key::_internal_set_k_image(const std::string& value) {
  
  k_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void txin_token_to_key::set_k_image(std::string&& value) {
  
  k_image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.txin_token_to_key.k_image)
}
inline void txin_token_to_key::set_k_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txin_token_to_key.k_image)
}
inline void txin_token_to_key::set_k_image(const void* value, size_t size) {
  
  k_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txin_token_to_key.k_image)
}
inline std::string* txin_token_to_key::_internal_mutable_k_image() {
  
  return k_image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* txin_token_to_key::release_k_image() {
  // @@protoc_insertion_point(field_release:safex.txin_token_to_key.k_image)
  
  return k_image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void txin_token_to_key::set_allocated_k_image(std::string* k_image) {
  if (k_image != nullptr) {
    
  } else {
    
  }
  k_image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k_image);
  // @@protoc_insertion_point(field_set_allocated:safex.txin_token_to_key.k_image)
}

// repeated uint64 key_offsets = 3;
inline int txin_token_to_key::_internal_key_offsets_size() const {
  return key_offsets_.size();
}
inline int txin_token_to_key::key_offsets_size() const {
  return _internal_key_offsets_size();
}
inline void txin_token_to_key::clear_key_offsets() {
  key_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txin_token_to_key::_internal_key_offsets(int index) const {
  return key_offsets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txin_token_to_key::key_offsets(int index) const {
  // @@protoc_insertion_point(field_get:safex.txin_token_to_key.key_offsets)
  return _internal_key_offsets(index);
}
inline void txin_token_to_key::set_key_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  key_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:safex.txin_token_to_key.key_offsets)
}
inline void txin_token_to_key::_internal_add_key_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  key_offsets_.Add(value);
}
inline void txin_token_to_key::add_key_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_key_offsets(value);
  // @@protoc_insertion_point(field_add:safex.txin_token_to_key.key_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
txin_token_to_key::_internal_key_offsets() const {
  return key_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
txin_token_to_key::key_offsets() const {
  // @@protoc_insertion_point(field_list:safex.txin_token_to_key.key_offsets)
  return _internal_key_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
txin_token_to_key::_internal_mutable_key_offsets() {
  return &key_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
txin_token_to_key::mutable_key_offsets() {
  // @@protoc_insertion_point(field_mutable_list:safex.txin_token_to_key.key_offsets)
  return _internal_mutable_key_offsets();
}

// -------------------------------------------------------------------

// txin_token_migration

// uint64 token_amount = 1;
inline void txin_token_migration::clear_token_amount() {
  token_amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txin_token_migration::_internal_token_amount() const {
  return token_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txin_token_migration::token_amount() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_migration.token_amount)
  return _internal_token_amount();
}
inline void txin_token_migration::_internal_set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  token_amount_ = value;
}
inline void txin_token_migration::set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_token_amount(value);
  // @@protoc_insertion_point(field_set:safex.txin_token_migration.token_amount)
}

// string bitcoin_burn_transaction = 2;
inline void txin_token_migration::clear_bitcoin_burn_transaction() {
  bitcoin_burn_transaction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& txin_token_migration::bitcoin_burn_transaction() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_migration.bitcoin_burn_transaction)
  return _internal_bitcoin_burn_transaction();
}
inline void txin_token_migration::set_bitcoin_burn_transaction(const std::string& value) {
  _internal_set_bitcoin_burn_transaction(value);
  // @@protoc_insertion_point(field_set:safex.txin_token_migration.bitcoin_burn_transaction)
}
inline std::string* txin_token_migration::mutable_bitcoin_burn_transaction() {
  // @@protoc_insertion_point(field_mutable:safex.txin_token_migration.bitcoin_burn_transaction)
  return _internal_mutable_bitcoin_burn_transaction();
}
inline const std::string& txin_token_migration::_internal_bitcoin_burn_transaction() const {
  return bitcoin_burn_transaction_.GetNoArena();
}
inline void txin_token_migration::_internal_set_bitcoin_burn_transaction(const std::string& value) {
  
  bitcoin_burn_transaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void txin_token_migration::set_bitcoin_burn_transaction(std::string&& value) {
  
  bitcoin_burn_transaction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.txin_token_migration.bitcoin_burn_transaction)
}
inline void txin_token_migration::set_bitcoin_burn_transaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bitcoin_burn_transaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txin_token_migration.bitcoin_burn_transaction)
}
inline void txin_token_migration::set_bitcoin_burn_transaction(const char* value, size_t size) {
  
  bitcoin_burn_transaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txin_token_migration.bitcoin_burn_transaction)
}
inline std::string* txin_token_migration::_internal_mutable_bitcoin_burn_transaction() {
  
  return bitcoin_burn_transaction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* txin_token_migration::release_bitcoin_burn_transaction() {
  // @@protoc_insertion_point(field_release:safex.txin_token_migration.bitcoin_burn_transaction)
  
  return bitcoin_burn_transaction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void txin_token_migration::set_allocated_bitcoin_burn_transaction(std::string* bitcoin_burn_transaction) {
  if (bitcoin_burn_transaction != nullptr) {
    
  } else {
    
  }
  bitcoin_burn_transaction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bitcoin_burn_transaction);
  // @@protoc_insertion_point(field_set_allocated:safex.txin_token_migration.bitcoin_burn_transaction)
}

// bytes k_image = 3;
inline void txin_token_migration::clear_k_image() {
  k_image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& txin_token_migration::k_image() const {
  // @@protoc_insertion_point(field_get:safex.txin_token_migration.k_image)
  return _internal_k_image();
}
inline void txin_token_migration::set_k_image(const std::string& value) {
  _internal_set_k_image(value);
  // @@protoc_insertion_point(field_set:safex.txin_token_migration.k_image)
}
inline std::string* txin_token_migration::mutable_k_image() {
  // @@protoc_insertion_point(field_mutable:safex.txin_token_migration.k_image)
  return _internal_mutable_k_image();
}
inline const std::string& txin_token_migration::_internal_k_image() const {
  return k_image_.GetNoArena();
}
inline void txin_token_migration::_internal_set_k_image(const std::string& value) {
  
  k_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void txin_token_migration::set_k_image(std::string&& value) {
  
  k_image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.txin_token_migration.k_image)
}
inline void txin_token_migration::set_k_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txin_token_migration.k_image)
}
inline void txin_token_migration::set_k_image(const void* value, size_t size) {
  
  k_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txin_token_migration.k_image)
}
inline std::string* txin_token_migration::_internal_mutable_k_image() {
  
  return k_image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* txin_token_migration::release_k_image() {
  // @@protoc_insertion_point(field_release:safex.txin_token_migration.k_image)
  
  return k_image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void txin_token_migration::set_allocated_k_image(std::string* k_image) {
  if (k_image != nullptr) {
    
  } else {
    
  }
  k_image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k_image);
  // @@protoc_insertion_point(field_set_allocated:safex.txin_token_migration.k_image)
}

// -------------------------------------------------------------------

// txin_v

// .safex.txin_gen txin_gen = 1;
inline bool txin_v::_internal_has_txin_gen() const {
  return this != internal_default_instance() && txin_gen_ != nullptr;
}
inline bool txin_v::has_txin_gen() const {
  return _internal_has_txin_gen();
}
inline void txin_v::clear_txin_gen() {
  if (GetArenaNoVirtual() == nullptr && txin_gen_ != nullptr) {
    delete txin_gen_;
  }
  txin_gen_ = nullptr;
}
inline const ::safex::txin_gen& txin_v::_internal_txin_gen() const {
  const ::safex::txin_gen* p = txin_gen_;
  return p != nullptr ? *p : *reinterpret_cast<const ::safex::txin_gen*>(
      &::safex::_txin_gen_default_instance_);
}
inline const ::safex::txin_gen& txin_v::txin_gen() const {
  // @@protoc_insertion_point(field_get:safex.txin_v.txin_gen)
  return _internal_txin_gen();
}
inline ::safex::txin_gen* txin_v::release_txin_gen() {
  // @@protoc_insertion_point(field_release:safex.txin_v.txin_gen)
  
  ::safex::txin_gen* temp = txin_gen_;
  txin_gen_ = nullptr;
  return temp;
}
inline ::safex::txin_gen* txin_v::_internal_mutable_txin_gen() {
  
  if (txin_gen_ == nullptr) {
    auto* p = CreateMaybeMessage<::safex::txin_gen>(GetArenaNoVirtual());
    txin_gen_ = p;
  }
  return txin_gen_;
}
inline ::safex::txin_gen* txin_v::mutable_txin_gen() {
  // @@protoc_insertion_point(field_mutable:safex.txin_v.txin_gen)
  return _internal_mutable_txin_gen();
}
inline void txin_v::set_allocated_txin_gen(::safex::txin_gen* txin_gen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete txin_gen_;
  }
  if (txin_gen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      txin_gen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txin_gen, submessage_arena);
    }
    
  } else {
    
  }
  txin_gen_ = txin_gen;
  // @@protoc_insertion_point(field_set_allocated:safex.txin_v.txin_gen)
}

// .safex.txin_to_key txin_to_key = 2;
inline bool txin_v::_internal_has_txin_to_key() const {
  return this != internal_default_instance() && txin_to_key_ != nullptr;
}
inline bool txin_v::has_txin_to_key() const {
  return _internal_has_txin_to_key();
}
inline void txin_v::clear_txin_to_key() {
  if (GetArenaNoVirtual() == nullptr && txin_to_key_ != nullptr) {
    delete txin_to_key_;
  }
  txin_to_key_ = nullptr;
}
inline const ::safex::txin_to_key& txin_v::_internal_txin_to_key() const {
  const ::safex::txin_to_key* p = txin_to_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::safex::txin_to_key*>(
      &::safex::_txin_to_key_default_instance_);
}
inline const ::safex::txin_to_key& txin_v::txin_to_key() const {
  // @@protoc_insertion_point(field_get:safex.txin_v.txin_to_key)
  return _internal_txin_to_key();
}
inline ::safex::txin_to_key* txin_v::release_txin_to_key() {
  // @@protoc_insertion_point(field_release:safex.txin_v.txin_to_key)
  
  ::safex::txin_to_key* temp = txin_to_key_;
  txin_to_key_ = nullptr;
  return temp;
}
inline ::safex::txin_to_key* txin_v::_internal_mutable_txin_to_key() {
  
  if (txin_to_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::safex::txin_to_key>(GetArenaNoVirtual());
    txin_to_key_ = p;
  }
  return txin_to_key_;
}
inline ::safex::txin_to_key* txin_v::mutable_txin_to_key() {
  // @@protoc_insertion_point(field_mutable:safex.txin_v.txin_to_key)
  return _internal_mutable_txin_to_key();
}
inline void txin_v::set_allocated_txin_to_key(::safex::txin_to_key* txin_to_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete txin_to_key_;
  }
  if (txin_to_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      txin_to_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txin_to_key, submessage_arena);
    }
    
  } else {
    
  }
  txin_to_key_ = txin_to_key;
  // @@protoc_insertion_point(field_set_allocated:safex.txin_v.txin_to_key)
}

// .safex.txin_token_to_key txin_token_to_key = 3;
inline bool txin_v::_internal_has_txin_token_to_key() const {
  return this != internal_default_instance() && txin_token_to_key_ != nullptr;
}
inline bool txin_v::has_txin_token_to_key() const {
  return _internal_has_txin_token_to_key();
}
inline void txin_v::clear_txin_token_to_key() {
  if (GetArenaNoVirtual() == nullptr && txin_token_to_key_ != nullptr) {
    delete txin_token_to_key_;
  }
  txin_token_to_key_ = nullptr;
}
inline const ::safex::txin_token_to_key& txin_v::_internal_txin_token_to_key() const {
  const ::safex::txin_token_to_key* p = txin_token_to_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::safex::txin_token_to_key*>(
      &::safex::_txin_token_to_key_default_instance_);
}
inline const ::safex::txin_token_to_key& txin_v::txin_token_to_key() const {
  // @@protoc_insertion_point(field_get:safex.txin_v.txin_token_to_key)
  return _internal_txin_token_to_key();
}
inline ::safex::txin_token_to_key* txin_v::release_txin_token_to_key() {
  // @@protoc_insertion_point(field_release:safex.txin_v.txin_token_to_key)
  
  ::safex::txin_token_to_key* temp = txin_token_to_key_;
  txin_token_to_key_ = nullptr;
  return temp;
}
inline ::safex::txin_token_to_key* txin_v::_internal_mutable_txin_token_to_key() {
  
  if (txin_token_to_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::safex::txin_token_to_key>(GetArenaNoVirtual());
    txin_token_to_key_ = p;
  }
  return txin_token_to_key_;
}
inline ::safex::txin_token_to_key* txin_v::mutable_txin_token_to_key() {
  // @@protoc_insertion_point(field_mutable:safex.txin_v.txin_token_to_key)
  return _internal_mutable_txin_token_to_key();
}
inline void txin_v::set_allocated_txin_token_to_key(::safex::txin_token_to_key* txin_token_to_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete txin_token_to_key_;
  }
  if (txin_token_to_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      txin_token_to_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txin_token_to_key, submessage_arena);
    }
    
  } else {
    
  }
  txin_token_to_key_ = txin_token_to_key;
  // @@protoc_insertion_point(field_set_allocated:safex.txin_v.txin_token_to_key)
}

// .safex.txin_token_migration txin_token_migration = 4;
inline bool txin_v::_internal_has_txin_token_migration() const {
  return this != internal_default_instance() && txin_token_migration_ != nullptr;
}
inline bool txin_v::has_txin_token_migration() const {
  return _internal_has_txin_token_migration();
}
inline void txin_v::clear_txin_token_migration() {
  if (GetArenaNoVirtual() == nullptr && txin_token_migration_ != nullptr) {
    delete txin_token_migration_;
  }
  txin_token_migration_ = nullptr;
}
inline const ::safex::txin_token_migration& txin_v::_internal_txin_token_migration() const {
  const ::safex::txin_token_migration* p = txin_token_migration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::safex::txin_token_migration*>(
      &::safex::_txin_token_migration_default_instance_);
}
inline const ::safex::txin_token_migration& txin_v::txin_token_migration() const {
  // @@protoc_insertion_point(field_get:safex.txin_v.txin_token_migration)
  return _internal_txin_token_migration();
}
inline ::safex::txin_token_migration* txin_v::release_txin_token_migration() {
  // @@protoc_insertion_point(field_release:safex.txin_v.txin_token_migration)
  
  ::safex::txin_token_migration* temp = txin_token_migration_;
  txin_token_migration_ = nullptr;
  return temp;
}
inline ::safex::txin_token_migration* txin_v::_internal_mutable_txin_token_migration() {
  
  if (txin_token_migration_ == nullptr) {
    auto* p = CreateMaybeMessage<::safex::txin_token_migration>(GetArenaNoVirtual());
    txin_token_migration_ = p;
  }
  return txin_token_migration_;
}
inline ::safex::txin_token_migration* txin_v::mutable_txin_token_migration() {
  // @@protoc_insertion_point(field_mutable:safex.txin_v.txin_token_migration)
  return _internal_mutable_txin_token_migration();
}
inline void txin_v::set_allocated_txin_token_migration(::safex::txin_token_migration* txin_token_migration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete txin_token_migration_;
  }
  if (txin_token_migration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      txin_token_migration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txin_token_migration, submessage_arena);
    }
    
  } else {
    
  }
  txin_token_migration_ = txin_token_migration;
  // @@protoc_insertion_point(field_set_allocated:safex.txin_v.txin_token_migration)
}

// -------------------------------------------------------------------

// txout_to_key

// bytes key = 1;
inline void txout_to_key::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& txout_to_key::key() const {
  // @@protoc_insertion_point(field_get:safex.txout_to_key.key)
  return _internal_key();
}
inline void txout_to_key::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:safex.txout_to_key.key)
}
inline std::string* txout_to_key::mutable_key() {
  // @@protoc_insertion_point(field_mutable:safex.txout_to_key.key)
  return _internal_mutable_key();
}
inline const std::string& txout_to_key::_internal_key() const {
  return key_.GetNoArena();
}
inline void txout_to_key::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void txout_to_key::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.txout_to_key.key)
}
inline void txout_to_key::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txout_to_key.key)
}
inline void txout_to_key::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txout_to_key.key)
}
inline std::string* txout_to_key::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* txout_to_key::release_key() {
  // @@protoc_insertion_point(field_release:safex.txout_to_key.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void txout_to_key::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:safex.txout_to_key.key)
}

// -------------------------------------------------------------------

// txout_token_to_key

// bytes key = 1;
inline void txout_token_to_key::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& txout_token_to_key::key() const {
  // @@protoc_insertion_point(field_get:safex.txout_token_to_key.key)
  return _internal_key();
}
inline void txout_token_to_key::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:safex.txout_token_to_key.key)
}
inline std::string* txout_token_to_key::mutable_key() {
  // @@protoc_insertion_point(field_mutable:safex.txout_token_to_key.key)
  return _internal_mutable_key();
}
inline const std::string& txout_token_to_key::_internal_key() const {
  return key_.GetNoArena();
}
inline void txout_token_to_key::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void txout_token_to_key::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.txout_token_to_key.key)
}
inline void txout_token_to_key::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.txout_token_to_key.key)
}
inline void txout_token_to_key::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.txout_token_to_key.key)
}
inline std::string* txout_token_to_key::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* txout_token_to_key::release_key() {
  // @@protoc_insertion_point(field_release:safex.txout_token_to_key.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void txout_token_to_key::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:safex.txout_token_to_key.key)
}

// -------------------------------------------------------------------

// txout_target_v

// .safex.txout_to_key txout_to_key = 1;
inline bool txout_target_v::_internal_has_txout_to_key() const {
  return this != internal_default_instance() && txout_to_key_ != nullptr;
}
inline bool txout_target_v::has_txout_to_key() const {
  return _internal_has_txout_to_key();
}
inline void txout_target_v::clear_txout_to_key() {
  if (GetArenaNoVirtual() == nullptr && txout_to_key_ != nullptr) {
    delete txout_to_key_;
  }
  txout_to_key_ = nullptr;
}
inline const ::safex::txout_to_key& txout_target_v::_internal_txout_to_key() const {
  const ::safex::txout_to_key* p = txout_to_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::safex::txout_to_key*>(
      &::safex::_txout_to_key_default_instance_);
}
inline const ::safex::txout_to_key& txout_target_v::txout_to_key() const {
  // @@protoc_insertion_point(field_get:safex.txout_target_v.txout_to_key)
  return _internal_txout_to_key();
}
inline ::safex::txout_to_key* txout_target_v::release_txout_to_key() {
  // @@protoc_insertion_point(field_release:safex.txout_target_v.txout_to_key)
  
  ::safex::txout_to_key* temp = txout_to_key_;
  txout_to_key_ = nullptr;
  return temp;
}
inline ::safex::txout_to_key* txout_target_v::_internal_mutable_txout_to_key() {
  
  if (txout_to_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::safex::txout_to_key>(GetArenaNoVirtual());
    txout_to_key_ = p;
  }
  return txout_to_key_;
}
inline ::safex::txout_to_key* txout_target_v::mutable_txout_to_key() {
  // @@protoc_insertion_point(field_mutable:safex.txout_target_v.txout_to_key)
  return _internal_mutable_txout_to_key();
}
inline void txout_target_v::set_allocated_txout_to_key(::safex::txout_to_key* txout_to_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete txout_to_key_;
  }
  if (txout_to_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      txout_to_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txout_to_key, submessage_arena);
    }
    
  } else {
    
  }
  txout_to_key_ = txout_to_key;
  // @@protoc_insertion_point(field_set_allocated:safex.txout_target_v.txout_to_key)
}

// .safex.txout_token_to_key txout_token_to_key = 2;
inline bool txout_target_v::_internal_has_txout_token_to_key() const {
  return this != internal_default_instance() && txout_token_to_key_ != nullptr;
}
inline bool txout_target_v::has_txout_token_to_key() const {
  return _internal_has_txout_token_to_key();
}
inline void txout_target_v::clear_txout_token_to_key() {
  if (GetArenaNoVirtual() == nullptr && txout_token_to_key_ != nullptr) {
    delete txout_token_to_key_;
  }
  txout_token_to_key_ = nullptr;
}
inline const ::safex::txout_token_to_key& txout_target_v::_internal_txout_token_to_key() const {
  const ::safex::txout_token_to_key* p = txout_token_to_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::safex::txout_token_to_key*>(
      &::safex::_txout_token_to_key_default_instance_);
}
inline const ::safex::txout_token_to_key& txout_target_v::txout_token_to_key() const {
  // @@protoc_insertion_point(field_get:safex.txout_target_v.txout_token_to_key)
  return _internal_txout_token_to_key();
}
inline ::safex::txout_token_to_key* txout_target_v::release_txout_token_to_key() {
  // @@protoc_insertion_point(field_release:safex.txout_target_v.txout_token_to_key)
  
  ::safex::txout_token_to_key* temp = txout_token_to_key_;
  txout_token_to_key_ = nullptr;
  return temp;
}
inline ::safex::txout_token_to_key* txout_target_v::_internal_mutable_txout_token_to_key() {
  
  if (txout_token_to_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::safex::txout_token_to_key>(GetArenaNoVirtual());
    txout_token_to_key_ = p;
  }
  return txout_token_to_key_;
}
inline ::safex::txout_token_to_key* txout_target_v::mutable_txout_token_to_key() {
  // @@protoc_insertion_point(field_mutable:safex.txout_target_v.txout_token_to_key)
  return _internal_mutable_txout_token_to_key();
}
inline void txout_target_v::set_allocated_txout_token_to_key(::safex::txout_token_to_key* txout_token_to_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete txout_token_to_key_;
  }
  if (txout_token_to_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      txout_token_to_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txout_token_to_key, submessage_arena);
    }
    
  } else {
    
  }
  txout_token_to_key_ = txout_token_to_key;
  // @@protoc_insertion_point(field_set_allocated:safex.txout_target_v.txout_token_to_key)
}

// -------------------------------------------------------------------

// txout

// uint64 amount = 1;
inline void txout::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txout::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txout::amount() const {
  // @@protoc_insertion_point(field_get:safex.txout.amount)
  return _internal_amount();
}
inline void txout::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void txout::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:safex.txout.amount)
}

// uint64 token_amount = 2;
inline void txout::clear_token_amount() {
  token_amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txout::_internal_token_amount() const {
  return token_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 txout::token_amount() const {
  // @@protoc_insertion_point(field_get:safex.txout.token_amount)
  return _internal_token_amount();
}
inline void txout::_internal_set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  token_amount_ = value;
}
inline void txout::set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_token_amount(value);
  // @@protoc_insertion_point(field_set:safex.txout.token_amount)
}

// .safex.txout_target_v target = 3;
inline bool txout::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool txout::has_target() const {
  return _internal_has_target();
}
inline void txout::clear_target() {
  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::safex::txout_target_v& txout::_internal_target() const {
  const ::safex::txout_target_v* p = target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::safex::txout_target_v*>(
      &::safex::_txout_target_v_default_instance_);
}
inline const ::safex::txout_target_v& txout::target() const {
  // @@protoc_insertion_point(field_get:safex.txout.target)
  return _internal_target();
}
inline ::safex::txout_target_v* txout::release_target() {
  // @@protoc_insertion_point(field_release:safex.txout.target)
  
  ::safex::txout_target_v* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::safex::txout_target_v* txout::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::safex::txout_target_v>(GetArenaNoVirtual());
    target_ = p;
  }
  return target_;
}
inline ::safex::txout_target_v* txout::mutable_target() {
  // @@protoc_insertion_point(field_mutable:safex.txout.target)
  return _internal_mutable_target();
}
inline void txout::set_allocated_target(::safex::txout_target_v* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:safex.txout.target)
}

// -------------------------------------------------------------------

// SigData

// bytes r = 1;
inline void SigData::clear_r() {
  r_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SigData::r() const {
  // @@protoc_insertion_point(field_get:safex.SigData.r)
  return _internal_r();
}
inline void SigData::set_r(const std::string& value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:safex.SigData.r)
}
inline std::string* SigData::mutable_r() {
  // @@protoc_insertion_point(field_mutable:safex.SigData.r)
  return _internal_mutable_r();
}
inline const std::string& SigData::_internal_r() const {
  return r_.GetNoArena();
}
inline void SigData::_internal_set_r(const std::string& value) {
  
  r_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SigData::set_r(std::string&& value) {
  
  r_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.SigData.r)
}
inline void SigData::set_r(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.SigData.r)
}
inline void SigData::set_r(const void* value, size_t size) {
  
  r_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.SigData.r)
}
inline std::string* SigData::_internal_mutable_r() {
  
  return r_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SigData::release_r() {
  // @@protoc_insertion_point(field_release:safex.SigData.r)
  
  return r_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SigData::set_allocated_r(std::string* r) {
  if (r != nullptr) {
    
  } else {
    
  }
  r_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r);
  // @@protoc_insertion_point(field_set_allocated:safex.SigData.r)
}

// bytes c = 2;
inline void SigData::clear_c() {
  c_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SigData::c() const {
  // @@protoc_insertion_point(field_get:safex.SigData.c)
  return _internal_c();
}
inline void SigData::set_c(const std::string& value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:safex.SigData.c)
}
inline std::string* SigData::mutable_c() {
  // @@protoc_insertion_point(field_mutable:safex.SigData.c)
  return _internal_mutable_c();
}
inline const std::string& SigData::_internal_c() const {
  return c_.GetNoArena();
}
inline void SigData::_internal_set_c(const std::string& value) {
  
  c_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SigData::set_c(std::string&& value) {
  
  c_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.SigData.c)
}
inline void SigData::set_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  c_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.SigData.c)
}
inline void SigData::set_c(const void* value, size_t size) {
  
  c_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.SigData.c)
}
inline std::string* SigData::_internal_mutable_c() {
  
  return c_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SigData::release_c() {
  // @@protoc_insertion_point(field_release:safex.SigData.c)
  
  return c_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SigData::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  c_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c);
  // @@protoc_insertion_point(field_set_allocated:safex.SigData.c)
}

// -------------------------------------------------------------------

// Signature

// repeated .safex.SigData signature = 1;
inline int Signature::_internal_signature_size() const {
  return signature_.size();
}
inline int Signature::signature_size() const {
  return _internal_signature_size();
}
inline void Signature::clear_signature() {
  signature_.Clear();
}
inline ::safex::SigData* Signature::mutable_signature(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Signature.signature)
  return signature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::SigData >*
Signature::mutable_signature() {
  // @@protoc_insertion_point(field_mutable_list:safex.Signature.signature)
  return &signature_;
}
inline const ::safex::SigData& Signature::_internal_signature(int index) const {
  return signature_.Get(index);
}
inline const ::safex::SigData& Signature::signature(int index) const {
  // @@protoc_insertion_point(field_get:safex.Signature.signature)
  return _internal_signature(index);
}
inline ::safex::SigData* Signature::_internal_add_signature() {
  return signature_.Add();
}
inline ::safex::SigData* Signature::add_signature() {
  // @@protoc_insertion_point(field_add:safex.Signature.signature)
  return _internal_add_signature();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::SigData >&
Signature::signature() const {
  // @@protoc_insertion_point(field_list:safex.Signature.signature)
  return signature_;
}

// -------------------------------------------------------------------

// Transaction

// uint64 version = 1;
inline void Transaction::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::version() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.version)
  return _internal_version();
}
inline void Transaction::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void Transaction::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:safex.Transaction.version)
}

// uint64 unlock_time = 2;
inline void Transaction::clear_unlock_time() {
  unlock_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_unlock_time() const {
  return unlock_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::unlock_time() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.unlock_time)
  return _internal_unlock_time();
}
inline void Transaction::_internal_set_unlock_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  unlock_time_ = value;
}
inline void Transaction::set_unlock_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_unlock_time(value);
  // @@protoc_insertion_point(field_set:safex.Transaction.unlock_time)
}

// bytes extra = 3;
inline void Transaction::clear_extra() {
  extra_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::extra() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.extra)
  return _internal_extra();
}
inline void Transaction::set_extra(const std::string& value) {
  _internal_set_extra(value);
  // @@protoc_insertion_point(field_set:safex.Transaction.extra)
}
inline std::string* Transaction::mutable_extra() {
  // @@protoc_insertion_point(field_mutable:safex.Transaction.extra)
  return _internal_mutable_extra();
}
inline const std::string& Transaction::_internal_extra() const {
  return extra_.GetNoArena();
}
inline void Transaction::_internal_set_extra(const std::string& value) {
  
  extra_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_extra(std::string&& value) {
  
  extra_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.Transaction.extra)
}
inline void Transaction::set_extra(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extra_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Transaction.extra)
}
inline void Transaction::set_extra(const void* value, size_t size) {
  
  extra_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Transaction.extra)
}
inline std::string* Transaction::_internal_mutable_extra() {
  
  return extra_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_extra() {
  // @@protoc_insertion_point(field_release:safex.Transaction.extra)
  
  return extra_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:safex.Transaction.extra)
}

// repeated .safex.txin_v vin = 4;
inline int Transaction::_internal_vin_size() const {
  return vin_.size();
}
inline int Transaction::vin_size() const {
  return _internal_vin_size();
}
inline void Transaction::clear_vin() {
  vin_.Clear();
}
inline ::safex::txin_v* Transaction::mutable_vin(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transaction.vin)
  return vin_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::txin_v >*
Transaction::mutable_vin() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transaction.vin)
  return &vin_;
}
inline const ::safex::txin_v& Transaction::_internal_vin(int index) const {
  return vin_.Get(index);
}
inline const ::safex::txin_v& Transaction::vin(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transaction.vin)
  return _internal_vin(index);
}
inline ::safex::txin_v* Transaction::_internal_add_vin() {
  return vin_.Add();
}
inline ::safex::txin_v* Transaction::add_vin() {
  // @@protoc_insertion_point(field_add:safex.Transaction.vin)
  return _internal_add_vin();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::txin_v >&
Transaction::vin() const {
  // @@protoc_insertion_point(field_list:safex.Transaction.vin)
  return vin_;
}

// repeated .safex.txout vout = 5;
inline int Transaction::_internal_vout_size() const {
  return vout_.size();
}
inline int Transaction::vout_size() const {
  return _internal_vout_size();
}
inline void Transaction::clear_vout() {
  vout_.Clear();
}
inline ::safex::txout* Transaction::mutable_vout(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transaction.vout)
  return vout_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::txout >*
Transaction::mutable_vout() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transaction.vout)
  return &vout_;
}
inline const ::safex::txout& Transaction::_internal_vout(int index) const {
  return vout_.Get(index);
}
inline const ::safex::txout& Transaction::vout(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transaction.vout)
  return _internal_vout(index);
}
inline ::safex::txout* Transaction::_internal_add_vout() {
  return vout_.Add();
}
inline ::safex::txout* Transaction::add_vout() {
  // @@protoc_insertion_point(field_add:safex.Transaction.vout)
  return _internal_add_vout();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::txout >&
Transaction::vout() const {
  // @@protoc_insertion_point(field_list:safex.Transaction.vout)
  return vout_;
}

// repeated .safex.Signature signatures = 6;
inline int Transaction::_internal_signatures_size() const {
  return signatures_.size();
}
inline int Transaction::signatures_size() const {
  return _internal_signatures_size();
}
inline void Transaction::clear_signatures() {
  signatures_.Clear();
}
inline ::safex::Signature* Transaction::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transaction.signatures)
  return signatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Signature >*
Transaction::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transaction.signatures)
  return &signatures_;
}
inline const ::safex::Signature& Transaction::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const ::safex::Signature& Transaction::signatures(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transaction.signatures)
  return _internal_signatures(index);
}
inline ::safex::Signature* Transaction::_internal_add_signatures() {
  return signatures_.Add();
}
inline ::safex::Signature* Transaction::add_signatures() {
  // @@protoc_insertion_point(field_add:safex.Transaction.signatures)
  return _internal_add_signatures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Signature >&
Transaction::signatures() const {
  // @@protoc_insertion_point(field_list:safex.Transaction.signatures)
  return signatures_;
}

// uint64 block_height = 7;
inline void Transaction::clear_block_height() {
  block_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::block_height() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.block_height)
  return _internal_block_height();
}
inline void Transaction::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_height_ = value;
}
inline void Transaction::set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:safex.Transaction.block_height)
}

// uint64 block_timestamp = 8;
inline void Transaction::clear_block_timestamp() {
  block_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_block_timestamp() const {
  return block_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::block_timestamp() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.block_timestamp)
  return _internal_block_timestamp();
}
inline void Transaction::_internal_set_block_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_timestamp_ = value;
}
inline void Transaction::set_block_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_timestamp(value);
  // @@protoc_insertion_point(field_set:safex.Transaction.block_timestamp)
}

// bool double_spend_seen = 9;
inline void Transaction::clear_double_spend_seen() {
  double_spend_seen_ = false;
}
inline bool Transaction::_internal_double_spend_seen() const {
  return double_spend_seen_;
}
inline bool Transaction::double_spend_seen() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.double_spend_seen)
  return _internal_double_spend_seen();
}
inline void Transaction::_internal_set_double_spend_seen(bool value) {
  
  double_spend_seen_ = value;
}
inline void Transaction::set_double_spend_seen(bool value) {
  _internal_set_double_spend_seen(value);
  // @@protoc_insertion_point(field_set:safex.Transaction.double_spend_seen)
}

// bool in_pool = 10;
inline void Transaction::clear_in_pool() {
  in_pool_ = false;
}
inline bool Transaction::_internal_in_pool() const {
  return in_pool_;
}
inline bool Transaction::in_pool() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.in_pool)
  return _internal_in_pool();
}
inline void Transaction::_internal_set_in_pool(bool value) {
  
  in_pool_ = value;
}
inline void Transaction::set_in_pool(bool value) {
  _internal_set_in_pool(value);
  // @@protoc_insertion_point(field_set:safex.Transaction.in_pool)
}

// repeated uint64 output_indices = 11;
inline int Transaction::_internal_output_indices_size() const {
  return output_indices_.size();
}
inline int Transaction::output_indices_size() const {
  return _internal_output_indices_size();
}
inline void Transaction::clear_output_indices() {
  output_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_output_indices(int index) const {
  return output_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::output_indices(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transaction.output_indices)
  return _internal_output_indices(index);
}
inline void Transaction::set_output_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  output_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:safex.Transaction.output_indices)
}
inline void Transaction::_internal_add_output_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  output_indices_.Add(value);
}
inline void Transaction::add_output_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_output_indices(value);
  // @@protoc_insertion_point(field_add:safex.Transaction.output_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Transaction::_internal_output_indices() const {
  return output_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Transaction::output_indices() const {
  // @@protoc_insertion_point(field_list:safex.Transaction.output_indices)
  return _internal_output_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Transaction::_internal_mutable_output_indices() {
  return &output_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Transaction::mutable_output_indices() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transaction.output_indices)
  return _internal_mutable_output_indices();
}

// string tx_hash = 12;
inline void Transaction::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::tx_hash() const {
  // @@protoc_insertion_point(field_get:safex.Transaction.tx_hash)
  return _internal_tx_hash();
}
inline void Transaction::set_tx_hash(const std::string& value) {
  _internal_set_tx_hash(value);
  // @@protoc_insertion_point(field_set:safex.Transaction.tx_hash)
}
inline std::string* Transaction::mutable_tx_hash() {
  // @@protoc_insertion_point(field_mutable:safex.Transaction.tx_hash)
  return _internal_mutable_tx_hash();
}
inline const std::string& Transaction::_internal_tx_hash() const {
  return tx_hash_.GetNoArena();
}
inline void Transaction::_internal_set_tx_hash(const std::string& value) {
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_tx_hash(std::string&& value) {
  
  tx_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safex.Transaction.tx_hash)
}
inline void Transaction::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safex.Transaction.tx_hash)
}
inline void Transaction::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safex.Transaction.tx_hash)
}
inline std::string* Transaction::_internal_mutable_tx_hash() {
  
  return tx_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_tx_hash() {
  // @@protoc_insertion_point(field_release:safex.Transaction.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_tx_hash(std::string* tx_hash) {
  if (tx_hash != nullptr) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:safex.Transaction.tx_hash)
}

// -------------------------------------------------------------------

// Transactions

// repeated .safex.Transaction tx = 1;
inline int Transactions::_internal_tx_size() const {
  return tx_.size();
}
inline int Transactions::tx_size() const {
  return _internal_tx_size();
}
inline void Transactions::clear_tx() {
  tx_.Clear();
}
inline ::safex::Transaction* Transactions::mutable_tx(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transactions.tx)
  return tx_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Transaction >*
Transactions::mutable_tx() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transactions.tx)
  return &tx_;
}
inline const ::safex::Transaction& Transactions::_internal_tx(int index) const {
  return tx_.Get(index);
}
inline const ::safex::Transaction& Transactions::tx(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transactions.tx)
  return _internal_tx(index);
}
inline ::safex::Transaction* Transactions::_internal_add_tx() {
  return tx_.Add();
}
inline ::safex::Transaction* Transactions::add_tx() {
  // @@protoc_insertion_point(field_add:safex.Transactions.tx)
  return _internal_add_tx();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safex::Transaction >&
Transactions::tx() const {
  // @@protoc_insertion_point(field_list:safex.Transactions.tx)
  return tx_;
}

// repeated string missed_txs = 2;
inline int Transactions::_internal_missed_txs_size() const {
  return missed_txs_.size();
}
inline int Transactions::missed_txs_size() const {
  return _internal_missed_txs_size();
}
inline void Transactions::clear_missed_txs() {
  missed_txs_.Clear();
}
inline std::string* Transactions::add_missed_txs() {
  // @@protoc_insertion_point(field_add_mutable:safex.Transactions.missed_txs)
  return _internal_add_missed_txs();
}
inline const std::string& Transactions::_internal_missed_txs(int index) const {
  return missed_txs_.Get(index);
}
inline const std::string& Transactions::missed_txs(int index) const {
  // @@protoc_insertion_point(field_get:safex.Transactions.missed_txs)
  return _internal_missed_txs(index);
}
inline std::string* Transactions::mutable_missed_txs(int index) {
  // @@protoc_insertion_point(field_mutable:safex.Transactions.missed_txs)
  return missed_txs_.Mutable(index);
}
inline void Transactions::set_missed_txs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:safex.Transactions.missed_txs)
  missed_txs_.Mutable(index)->assign(value);
}
inline void Transactions::set_missed_txs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:safex.Transactions.missed_txs)
  missed_txs_.Mutable(index)->assign(std::move(value));
}
inline void Transactions::set_missed_txs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  missed_txs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safex.Transactions.missed_txs)
}
inline void Transactions::set_missed_txs(int index, const char* value, size_t size) {
  missed_txs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safex.Transactions.missed_txs)
}
inline std::string* Transactions::_internal_add_missed_txs() {
  return missed_txs_.Add();
}
inline void Transactions::add_missed_txs(const std::string& value) {
  missed_txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safex.Transactions.missed_txs)
}
inline void Transactions::add_missed_txs(std::string&& value) {
  missed_txs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safex.Transactions.missed_txs)
}
inline void Transactions::add_missed_txs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  missed_txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safex.Transactions.missed_txs)
}
inline void Transactions::add_missed_txs(const char* value, size_t size) {
  missed_txs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safex.Transactions.missed_txs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transactions::missed_txs() const {
  // @@protoc_insertion_point(field_list:safex.Transactions.missed_txs)
  return missed_txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transactions::mutable_missed_txs() {
  // @@protoc_insertion_point(field_mutable_list:safex.Transactions.missed_txs)
  return &missed_txs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safex

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transactions_2eproto
